<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <link rel="stylesheet" type="text/css" href="css/style.css" media="all"/>
    <link rel="shortcut icon" href="css/favicon.ico"/>
    <title>42 - Metaprogramming as default</title>
  </head>
  <body>
    <div id="wrapper">
      <div id="headerwrap">
        <div id="header">
          <img style='float:left;'
            src='css/logo.png' alt='42'/>
          <h1 style='float:left;'>
            <p style='font-size:150%; color:rgb(250,250,250);'>42 - The definitive answer to design, code and everything</p>
            <p style='font-size:100%; color:rgb(250,250,250);'> --But you are not going to like it</p>
          </h1>
        </div>
      </div>
      <div id="contentwrap">
        <div id="content">
<p>

<p>
In 42, to write strings and numbers literals
you can use the string or number construction operators,
as shown in the example before.
In most cases such operator is offered as a type method, so you just need to specify
the class name. That is, you can write <span class="code"><![CDATA[12N]]></span>, <span class="code"><![CDATA[12Meters]]></span>,
<span class="code"><![CDATA[S"hello"]]></span>
or <span class="code"><![CDATA[Url"L42.is"]]></span>
if N, Meters, S and Url support the number and string constructor operator.

We say that a class is a "numeric" class if it supports the number construction and some of the conventional <a href= "missing.xhtml">algebric operators</a>.

We say that a class is a "string" class if it support the string constructor and <a href= "missing.xhtml">sequence operators</a>

In most languages you are stuck with a finite set of number types and (usually) a single
string type, predefined in the language or in the standard library.
For example "Foo" is an instance of the predefined string type and
12d is an instance of the predefined double number kind,
and 12 is either an instance of int or any predefined number kind based
on some obscure disambiguation rule.
One of the design principle of 42 is to be clear and flexible
even at the cost of a little verbosity.
Thus, 12 or "foo" on their own are not part of the syntax of 42.

</p>

  <H3> Strings and numbers</H3>
 1 support all the java primitive types plus big int and big rational

 2 Unit of measures: Design decorators to generate unit of
     measure out of representation
    set of rules multiset of component->component
    and component -inverse-> component
    interpreted to generate <span class="code"><![CDATA[KgMeter[......dividedBy:... ]]]></span>
 3 there should be a decorator <span class="code"><![CDATA[String[S;escape:S"something" as:S"somethingElse"]<<{ method invariant(){....}}]]></span>


Desugaring for numbers and strings is as following
<span class="code"><![CDATA[S"ab"]]></span> =
<span class="code"><![CDATA[S.parseString(S.parser().parse_a().parse_b())]]></span>
<span class="code"><![CDATA[12Int]]></span> =
WCode(Int.parseNumber(Int.parser().parse_1().parse_2()))
WCode(Int.parser()) and
WCode(S.parser()) may return an instance of a <span class="code"><![CDATA[Parser]]></span> class,
potentially offering up to 100 methods.


      You can launch your application from command line typing
<span class="code"><![CDATA[L42 fileName.L42]]></span>
or
<span class="code"><![CDATA[L42 folderName]]></span>
where
<span class="code"><![CDATA[folderName]]></span>
must contain a file called
<span class="code"><![CDATA[Outer0.L42]]></span>.



        </p>
        </div>
      </div>
      <div id="footerwrap">
        <div id="footer">
          <ul style='padding: 10px;'>
            <!--<li style='display:inline;'><a href="http://ecs.victoria.ac.nz/Main/MarcoServetto" >Contact Us</a> |</li>
            <li style='display:inline;'><a href="http://www.victoria.ac.nz/ecs/disclaimer">Disclaimer</a> |</li>
            <li style='display:inline;'><a href="http://www.victoria.ac.nz/ecs/accessibility" >Site Accessibility</a></li>
   -->
          </ul>
          <p class="update">Page Updated: 22/12/2014&nbsp;&nbsp;</p>
        </div>
      </div>
    </div>


  </body>
</html>
