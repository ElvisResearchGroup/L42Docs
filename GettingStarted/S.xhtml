<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <link rel="stylesheet" type="text/css" href="css/style.css" media="all"/>
    <link rel="shortcut icon" href="css/favicon.ico"/>
    <title>42 - Metaprogramming as default</title>
  </head>
  <body>
    <div id="wrapper">
      <div id="headerwrap">
        <div id="header">
          <img style='float:left;'
            src='css/logo.png' alt='42'/>
          <h1 style='float:left;'>
            <p style='font-size:150%; color:rgb(250,250,250);'>42 - The definitive answer to design, code and everything</p>
            <p style='font-size:100%; color:rgb(250,250,250);'> --But you are not going to like it</p>
          </h1>
        </div>
      </div>
      <div id="contentwrap">
        <div id="content">
<p>

</p><h2> Strings and S </h2> <p>

Strings can be created by string literals as in S&quot;_&quot;
or by multiline string literals as in
<pre class="l42"><![CDATA[
S"
'foo
'bar
"
]]></pre>
</p><p>
Some special caracter can be obtained by factory methods, like
<span class="code"><![CDATA[S.doubleQuote()]]></span> or <span class="code"><![CDATA[S.newLine()]]></span>
There is no escaping in strings, so <h6 class="code">S&quot;\&quot;</h6> is a string with the single character <span class="code"><![CDATA[\]]></span>
</p><p>
Many objects can be turned into strings by calling the toS() method, for example
<h6 class="code">Point(x=0Int,y=0Int).toS()==S&quot;Point(x=0,y=0)&quot;</h6>
Objects implementing the toS() method can be subtype of the Concept.ToS interface.
</p><p>
Strings can be compared by <span class="code"><![CDATA[==]]></span>, <span class="code"><![CDATA[>]]></span>,<span class="code"><![CDATA[<]]></span>, <span class="code"><![CDATA[>=]]></span>, <span class="code"><![CDATA[<=]]></span> and <span class="code"><![CDATA[!=]]></span>.
</p><p>
Note that you can manually make your own class supporting <span class="code"><![CDATA[==]]></span> by writing a method with the special name
<span class="code"><![CDATA[operator==(that)]]></span>, or automatically simply using Data.
</p><p>
Strings are seen as senquences, so you can ask the
<span class="code"><![CDATA[.size()]]></span>, <span class="code"><![CDATA[.isEmpty()]]></span> and you can
extract the single characters using
</p><p>
<h6 class="code">S&quot;abcd&quot;(2UInt)==S&quot;c&quot;</h6>,
</p><p> or ask for substrings
</p><p>
<h6 class="code">S&quot;abcd&quot;(from: 0UInt to: 2UInt)==S&quot;abc&quot;</h6>
</p><p>
<h6 class="code">S&quot;abcd&quot;(to: 2UInt)==S&quot;abc&quot;</h6>
</p><p>
<h6 class="code">S&quot;abcd&quot;(from: 2UInt)==S&quot;d&quot;</h6>
</p><p>
or (functionally) update a substring
<h6 class="code">S&quot;abcd&quot;.with(1UInt,val=S&quot;WW&quot;)==S&quot;aWWcd&quot;</h6>
</p><p>
<h6 class="code">S&quot;abcd&quot;.with(from:1UInt to:2UInt,val=S&quot;WW&quot;)==S&quot;aWWd&quot;</h6>
</p><p>
You can also concatenate strings with <span class="code"><![CDATA[++]]></span>.
</p><p>
However to concatenate strings and other datatypes you would have to convert them in strings manually, as in
<h6 class="code">S&quot;Hello &quot;++42Int.toS()++&quot;!!&quot;</h6>
This can become cumbersome if you need to concatenate more then a couple of things.
To simplify this, there is the string formatting syntax:
</p><p>
<h6 class="code">S&quot;Hello &quot;[42Int]&quot;!!&quot;</h6>
</p><p>
This allows multiple values, and need to be always terminated by a quotes:
</p><p>
<h6 class="code">S&quot;Hello &quot;[42Int]&quot; and &quot;[8Int]&quot;&quot;</h6>
</p><p>
It allows formatting
</p><p>
<h6 class="code">S&quot;Hello &quot;[d_2=42Int]&quot;!!&quot;==S&quot;Hello 42.00&quot;</h6>
</p><p>
Lets now understand how this syntax works in 42:
S defines a class method
<h6 class="code">S operator&quot;&quot;(that)</h6>
S defines a method
<span class="code"><![CDATA[S.Formatter operator[(that)]]></span>
<span class="code"><![CDATA[/*is that a good name? what about operator#begin ?*/]]></span>


<span class="code"><![CDATA[S.Formatter]]></span>
 defines a
<span class="code"><![CDATA[method S.Formatter operator;]]></span>
 adding ToS object to the string under construction
<span class="code"><![CDATA[/* what about operator#add*/]]></span>

<span class="code"><![CDATA[S.Formatter]]></span>
defines a
<span class="code"><![CDATA[method operator](that) /*what about operator#end*/]]></span>

<span class="code"><![CDATA[S.Formatter]]></span>
 defines a

<h6 class="code">metod S operator&quot;&quot;(that)</h6>, allowing to add more string characters after the closed ]

This syntax also allows variations, like
<h6 class="code">S&quot;Hello &quot;[42Int; 12Int]&quot;&quot;</h6>
or
<h6 class="code">myString[]&quot;more text here&quot;</h6>
This is also the suggested way to write a single line string on multiple lines of code. Instead of concatenating many strings with <span class="code"><![CDATA[++]]></span>, just do
<h6 class="code">S&quot;foo&quot; []&quot;bar&quot; []&quot;beer&quot;</h6>



There are more methods in strings, like <span class="code"><![CDATA[.contains(that)]]></span> and
<span class="code"><![CDATA[.firstIndexOf(that)]]></span>



        </p>
        </div>
      </div>
      <div id="footerwrap">
        <div id="footer">
          <ul style='padding: 10px;'>
            <!--<li style='display:inline;'><a href="http://ecs.victoria.ac.nz/Main/MarcoServetto" >Contact Us</a> |</li>
            <li style='display:inline;'><a href="http://www.victoria.ac.nz/ecs/disclaimer">Disclaimer</a> |</li>
            <li style='display:inline;'><a href="http://www.victoria.ac.nz/ecs/accessibility" >Site Accessibility</a></li>
   -->
          </ul>
          <p class="update">Page Updated: 22/12/2014&nbsp;&nbsp;</p>
        </div>
      </div>
    </div>


  </body>
</html>
