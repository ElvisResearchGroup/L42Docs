<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <link rel="stylesheet" type="text/css" href="css/style.css" media="all"/>
    <script src="js/ace.js"></script>
    <script src="js/utils.js"></script>
    <link rel="shortcut icon" href="css/favicon.ico"/>
    <title>42 - Metaprogramming as default</title>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script src="https://www.googletagmanager.com/gtag/js?id=G-M0E4M0XH2Z"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-M0E4M0XH2Z');
    </script>
    <script src="https://www.googletagmanager.com/gtag/js?id=UA-212820693-1">
    </script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-212820693-1');
    </script>
    <script src="https://www.googletagmanager.com/gtag/js?id=AW-10810288706"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'AW-10810288706');
    </script>
<!-- Event snippet for Page view conversion page -->
<script>
gtag('event', 'conversion', {'send_to': 'AW-10810288706/U3KJCKekmIUDEMLU36Io'});
</script>
  </head>
  <body onload='doOnLoad();'>
    <div id="wrapper">
      <div id="headerwrap">
        <div id="header">
          <img style='float:left;'
            src='css/logoBlue.png' alt='42' width='120' height='120'/>
          <h3 style='float:left;'>
            <p style='font-size:150%; color:rgb(250,250,250);'>42 - The definitive answer to design, code and everything</p>
            <p style='font-size:100%; color:rgb(250,250,250);'> --But you are not going to like it</p>
          </h3>
        </div>
      </div>
      <div id="contentwrap">
        <div id="content">
<p>
<div class="index"><div class="wrapFloat"><div class="inFloat">
<div class="rotate90"> Index of Content</div>
</div><div class="inFloat">
<ol>
 <li><a href="tutorial_01Basics.xhtml"> Basic concepts </a></li>
 <li><a href="tutorial_02ModifiersIntro.xhtml"> Introduction to modifiers </a></li>
 <li><a href="tutorial_03BasicClasses.xhtml"> Basic Classes </a></li>
 <li><a href="tutorial_04ErrorsAndExceptions.xhtml"> Errors and Exceptions </a></li>
 <li><a href="tutorial_05Caching.xhtml"> Caching </a></li>
 <li><a href="tutorial_06CachingMut.xhtml"> Caching on Mutable objects </a></li>
 <li><a href="tutorial_07InterfacesAndMatching.xhtml"> Interfaces and Matching </a></li>
 <li><a href="tutorial_08Sequences.xhtml"> Collections and Sequences </a></li>
 <li><a href="tutorial_09InputOutput.xhtml"> Input Output </a></li>
 <li><a href="tutorial_10Exercises.xhtml"> Exercises </a></li>
 <li><a href="tutorial_11MetaprogrammingIntro.xhtml"> Metaprogramming Introduction </a></li>
 <li><a href="tutorial_12Refactoring.xhtml"> Programmatic Refactoring </a></li> 
 <li><a href="tutorial_13MoreDecorators.xhtml"> More Decorators </a></li>
 <li><a href="tutorial_14ExampleOfProgram.xhtml"> Example of a 42 Program </a></li>
 <li><a href="tutorial_15DeployCode.xhtml"> Deploy code </a></li>
</ol>
</div></div><div class="finishFloat"></div></div>
<br/>
<div class="index"><div class="wrapFloat"><div class="inFloat">
</div><div class="inFloat">
&nbsp; &nbsp; &nbsp; <a href="tutorial_01Basics.xhtml"> Previous </a>...<a href="tutorial_02ModifiersIntro.xhtml"> Next </a>
</div></div><div class="finishFloat"></div></div>
<br/>

 </p><p id="Basics"> </p><div style="break-after:page"></div><h1> Target audience </h1> <p>
This tutorial is design for expert programmers, already knowledgeable in 
at least two or three of the languages Java, C#, C++ and Python.
This tutorial lays out the basic knowledge for programming in 42 using AdamsTowel, but
does not explore the foundational theory behind 42,
or the mathematical rationale for the correctness of 42.
<br/>
The language 42 and many 42 metaphors are inspired by
 The Hitchhiker's Guide to the Galaxy by Douglas Adams.


</p><h2 id="Download"> Downloading and running </h2> <p>

Currently, you can download and run 42 as a 
Java program.
<ul>
<li>
  For windows download here <a href="L42PortableWin.zip">L42PortableWin.zip</a>
  </li>
<li>
  For Linux download here <a href="L42PortableLinux.zip">L42PortableLinux.zip</a>
  </li>
<li>
  For Mac download here <a href="L42PortableMac.zip">L42PortableMac.zip</a>
</li>
    <li>  Run <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[L42]]></span><it style="font-style: bold; color:green;">&#187;</it>
        to start the IDE.
</li>
<li>
  Run <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[L42 ProjectName]]></span><it style="font-style: bold; color:green;">&#187;</it>
    to run the 42 program inside of the folder <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[ProjectName]]></span><it style="font-style: bold; color:green;">&#187;</it> from the command line.
</li>
</ul>
</p><div style="break-after:page"></div><h1> Basics </h1> <p>
</p><h2> (1/5)Simple hello world program </h2> <p>
Let's look at a simple hello world program: 

<pre class="l42Big"><![CDATA[ 
reuse [L42.is/AdamsTowel]
Main = Debug(S"Hello world")
]]></pre>
<br/>
When we write <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[reuse [L42.is/AdamsTowel]]]></span><it style="font-style: bold; color:green;">&#187;</it> we are asking 42 to
reuse the code of the library found in the internet address 
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[L42.is/AdamsTowel]]></span><it style="font-style: bold; color:green;">&#187;</it>.
AdamsTowel is our <it style="font-style: italic;">towel</it>, that is the set of classes and interfaces that we wish to start from.
A <it style="font-style: italic;">towel</it> usually plays the role of "the standard library" of most languages.
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[L42.is]]></span><it style="font-style: bold; color:green;">&#187;</it> is the main website of 42, where most commonly used libraries are hosted. To reuse code you 
need an internet connection; but this also means that you will never have to manually import any code.
Required code will be downloaded and cached on your machine, so you need not to be aware of the existence of this mechanism.
</p><p>
We do not need to always start from AdamsTowel; there are many interesting towels out there, and you may also become skilled in the 
advanced technique of towel embroidery.
In this tutorial, all of our examples are expressed reusing <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[L42.is/AdamsTowel]]></span><it style="font-style: bold; color:green;">&#187;</it>.
</p><p>

At the right of <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Main = ]]></span><it style="font-style: bold; color:green;">&#187;</it> we write the expression that
we wish to execute; in this case we just print out using the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Debug]]></span><it style="font-style: bold; color:green;">&#187;</it> class.
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Main]]></span><it style="font-style: bold; color:green;">&#187;</it> is not a method, and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Main]]></span><it style="font-style: bold; color:green;">&#187;</it> is not special name either. You can replace it with <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Task]]></span><it style="font-style: bold; color:green;">&#187;</it> or any other valid
upper-case name. In 42 there is no concept of main method as in
Java or C. 
For now you can think of <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Main = ]]></span><it style="font-style: bold; color:green;">&#187;</it> as a top level command. We will understand later how this fits with the general language design.
</p><p>
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Debug]]></span><it style="font-style: bold; color:green;">&#187;</it>
is a simple class whose most important method print a message on the terminal.
</p><p>
In 42, when a class has a <span style="color:#ff1111; font-weight: bold;"> most important </span> method, it is conventional to use the empty name, so that can be used with the short syntax <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Debug(S"Hello world")]]></span><it style="font-style: bold; color:green;">&#187;</it> instead of a more verbose <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Debug.println(..)]]></span><it style="font-style: bold; color:green;">&#187;</it>. 

<br/>
In 42, Strings and numbers need to be created using their type, as in
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[S"Hello world"]]></span><it style="font-style: bold; color:green;">&#187;</it> or <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[12Num]]></span><it style="font-style: bold; color:green;">&#187;</it>.
Indeed <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[12Num]]></span><it style="font-style: bold; color:green;">&#187;</it> is just a convenience syntax equivalent to <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Num"1"]]></span><it style="font-style: bold; color:green;">&#187;</it>; the syntax with quotes is needed to express negative or fractional number literals, as for example <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Num"-12"]]></span><it style="font-style: bold; color:green;">&#187;</it>
 or <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Num"53/21"]]></span><it style="font-style: bold; color:green;">&#187;</it>.

</p><p>

</p><h2> (2/5)Method declaration and call </h2> <p>
Let's now define a method and call it.
<pre class="l42Big"><![CDATA[
reuse [L42.is/AdamsTowel]
MyCode = {
  class method
  S hello(S nickName) = { //we can use usual if/while
    if nickName.isEmpty() (return S"Hello!")
    return S"Hello %nickName!"
    } 
  }
Main = Debug(MyCode.hello(nickName=S"Marvin"))
//will print "Hello Marvin!"
]]></pre>
<br/>
Here we define a class to host our <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[hello(nickName)]]></span><it style="font-style: bold; color:green;">&#187;</it> method.
We write <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[class method]]></span><it style="font-style: bold; color:green;">&#187;</it> to define a method that can be called on the class object, as in <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[MyCode.hello(nickName=S"Marvin")]]></span><it style="font-style: bold; color:green;">&#187;</it>.
This is roughly equivalent to a static method in languages like Java or C++ , or class methods in Python.
Note that <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[%]]></span><it style="font-style: bold; color:green;">&#187;</it> inserts a value into a string.
</p><p>
Note that the method is called using the parameter name explicitly.
We believe this increases readability.
</p><p>
You may also notice how there are two different usages for curly brackets:  if there is at least one <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[return]]></span><it style="font-style: bold; color:green;">&#187;</it> keyword then the expression is a block of statements,
otherwise the expression is a library literal, which can contains methods and nested libraries.
A <span style="color:#ff1111; font-weight: bold;"> nested library </span>
is denoted by an upper-case name, and can be created from a library literal or from an expression producing a library literal.
A library literal can be a class (default case) or an interface (starts with the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[interface]]></span><it style="font-style: bold; color:green;">&#187;</it> keyword).
A nested library in 42 is similar to a static inner class in Java, or a nested class in C++. It is just a convenient way to separate the various components of our program and organize them into a tree shape.
</p><p>
The class <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[MyCode]]></span><it style="font-style: bold; color:green;">&#187;</it> from before offers a single class method, has no fields and you can not create instances of <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[MyCode]]></span><it style="font-style: bold; color:green;">&#187;</it>, since no factory is present.
In 42 we do not have constructors. Objects are created by <it style="font-style: italic;">factory methods</it>, that are just normal methods that happen to return an instance of their class. We believe this is a much simpler and more consistent approach to object initialization than having special syntax that encourages programmers to make assumptions about the behaviour of the operations.

</p><h2> (3/5)Simple class with internal state </h2> <p>
Now we show a class with state and a factory method: 
<pre class="l42Big"><![CDATA[
Point = Data:{
  Num x
  Num y
  method
  Point add(Num x) = //long version
    Point(x=x+this.x(), y=this.y())
  method
  Point add(Num y) = //shorter
    this.with(y=y+this.y())
  method
  Point sum(Point that) =
    Point(x=this.x()+that.x(), y=this.y()+that.y())
  }
]]></pre>
<br/>
Here you can see we define a <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Point]]></span><it style="font-style: bold; color:green;">&#187;</it> class with coordinates <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[x]]></span><it style="font-style: bold; color:green;">&#187;</it> and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[y]]></span><it style="font-style: bold; color:green;">&#187;</it> of type <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Num]]></span><it style="font-style: bold; color:green;">&#187;</it>,
unlimited precision rational number.

In addition to <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[x]]></span><it style="font-style: bold; color:green;">&#187;</it>,
 <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[y]]></span><it style="font-style: bold; color:green;">&#187;</it>,
 <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[add(x)]]></span><it style="font-style: bold; color:green;">&#187;</it>
 and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[add(y)]]></span><it style="font-style: bold; color:green;">&#187;</it>,
 <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Point]]></span><it style="font-style: bold; color:green;">&#187;</it> will offer many other useful methods, since it has been declared using
 <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Data]]></span><it style="font-style: bold; color:green;">&#187;</it>.
 </p><p>
Indeed, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Data]]></span><it style="font-style: bold; color:green;">&#187;</it> is a decorator. Decorators are classes/objects that offer an operator <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[:]]></span><it style="font-style: bold; color:green;">&#187;</it>, called the decorator operator,
whose goal is to translate a library into a <span style="color:#ff1111; font-weight: bold;"> better </span> library.
In this case, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Data]]></span><it style="font-style: bold; color:green;">&#187;</it> is translating the class <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[{Num x, Num y .....}]]></span><it style="font-style: bold; color:green;">&#187;</it>
 into a much longer class, with
a factory method taking in input the fields and initializing them; but also containing
 boring but useful definitions for
equality, inequality, conversion to string and many others.
<!--from and to human readable strings, XML and binary representations for (de)serialization.-->
</p><p>
Finally, we define a methods to add to each of the coordinates.
For very short methods we can omit the curly brackets and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[return]]></span><it style="font-style: bold; color:green;">&#187;</it>.
Indeed, method bodies are just expressions, and the curly brackets turn a block of statements into one expression. 

In the method <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[add(x)]]></span><it style="font-style: bold; color:green;">&#187;</it> we show how to create a new 
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Point]]></span><it style="font-style: bold; color:green;">&#187;</it> instance and how to call <it style="font-style: italic;">getter methods</it>.
In the method <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[add(y)]]></span><it style="font-style: bold; color:green;">&#187;</it> we show an improved version, using the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[with]]></span><it style="font-style: bold; color:green;">&#187;</it> method, another gift of Data, which allows us to easily create a clone with one or more fields updated.
We can define two methods, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[add(x)]]></span><it style="font-style: bold; color:green;">&#187;</it> and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[add(y)]]></span><it style="font-style: bold; color:green;">&#187;</it> with the same method name, if parameter names are different.
</p><p>
Note that we always use getters and we never access fields directly.
In many other languages we can use write <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[a.fieldName]]></span><it style="font-style: bold; color:green;">&#187;</it> and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[a.fieldName= newValue]]></span><it style="font-style: bold; color:green;">&#187;</it>. Such syntax does not exists in 42. The same goes for object instantiation; in many languages there is a dedicated  <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[new ClassName(..)]]></span><it style="font-style: bold; color:green;">&#187;</it> syntax, while in 42 it is just a method call.
</p><p>
Also, similarly to what happens in Python, we need to use <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[this.methodName()]]></span><it style="font-style: bold; color:green;">&#187;</it> to call methods when the receiver is <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[this]]></span><it style="font-style: bold; color:green;">&#187;</it>.
While it makes some code more verbose, naming the receiver avoids ambiguities about scoping and nesting for method resolution.


</p><h2> Decorators </h2> <p>
Decorators, such as <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Data]]></span><it style="font-style: bold; color:green;">&#187;</it>, are one of the main concepts used by 42 programmers. We will encounter many decorators in this tutorial.
For now, just get used to the pattern of writing
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[:]]></span><it style="font-style: bold; color:green;">&#187;</it> to go from a minimal chunk of code, with method declarations for the application specific bits, to a fully fledged usable class.

</p><h2> The backslash <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[\]]></span><it style="font-style: bold; color:green;">&#187;</it> </h2> <p>
In 42, we can use the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[\]]></span><it style="font-style: bold; color:green;">&#187;</it> character as a shortcut.
There are two different ways to use the backslash:
as a keyword or immediately followed by a lowercase identifier.
</p><p>
As a keyword, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[\]]></span><it style="font-style: bold; color:green;">&#187;</it> represents the expected type of the surrounding expression.
The slash searches outwards on super expressions until it finds a place with an easily guessable type:
the return type of the method, a method parameter or a local binding with an explicit type.
For example:
<pre class="l42Big"><![CDATA[
method Point add(Num x) = Point(x=x+this.x(), y=this.y())
]]></pre>
could be shortened as 
<pre class="l42Big"><![CDATA[
method Point add(Num x) = \(x=x+this.x(), y=this.y())
]]></pre>
Consider these other examples:
<pre class="l42Big"><![CDATA[
method Num foo() = 1\+2\ // \ is Num
method class Num bar() = \ // \ is Num
method Num baz() = \.zero().toS().size() // \ is Num
]]></pre>
</p><p>
Followed by a method name (and method parameters if any)
a <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[\]]></span><it style="font-style: bold; color:green;">&#187;</it> represents the receiver of the innermost method invocation.
Thus, for example
<pre class="l42Big"><![CDATA[
method Point add(Num y) = this.with(y=y+this.y())
]]></pre>
could be shortened as 
<pre class="l42Big"><![CDATA[
method Point add(Num y) = this.with(y=y+\y)
]]></pre>
Consider this other example:
<pre class="l42Big"><![CDATA[
method Point bar(Point that) = that.with(y=\sum(that).y())
method Point bar(Point that) = that.with(y=that.sum(that).y())//equivalent
]]></pre>

</p><p>
In the rest of the tutorial, we will use 
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[\]]></span><it style="font-style: bold; color:green;">&#187;</it> when it saves space. This shortcut seems unusual at first, but with a little of experience becomes very clear. 42 is a pure OO language, where the method call is the central operation. 
This syntax allows for the expressions of the method parameters to depend on the method receiver. We will see that this enables many interesting micropatterns.

</p><h2> (4/5)Collection.list </h2> <p>

Lists can be defined using <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Collection.list(_)]]></span><it style="font-style: bold; color:green;">&#187;</it>, as in the example below,

<pre class="l42Big"><![CDATA[
Nums = Collection.list(Num) //declaration for vectors of nums

Points = Collection.list(Point) //same for points

Main1 = Debug(Nums[ 10\; 20\; 30\ ]) //here \ is Num
Main2 = Debug(Points[\(x=10\ y=20\);\(x=1\ y=2\)]) //here the outer \ is Point
]]></pre>
where we define new classes <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Nums]]></span><it style="font-style: bold; color:green;">&#187;</it>
and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Points]]></span><it style="font-style: bold; color:green;">&#187;</it>. Note that those are new classes in a nominal type system, so in
<pre class="l42Big"><![CDATA[
Nums1 = Collection.list(Num)
Nums2 = Collection.list(Num)
]]></pre>
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Nums1]]></span><it style="font-style: bold; color:green;">&#187;</it> and
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Nums2]]></span><it style="font-style: bold; color:green;">&#187;</it> denote different classes, with different types.
As you can see, lists can be initialized with <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[[_;_;_]]]></span><it style="font-style: bold; color:green;">&#187;</it>.
In this case, this syntax is equivalent to creating a new empty list and then calling the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[add(that)]]></span><it style="font-style: bold; color:green;">&#187;</it> method
one time for each of the expressions separated by <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[;]]></span><it style="font-style: bold; color:green;">&#187;</it>.
Of course, the parameter type of that method is the element type of the list, so
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[\]]></span><it style="font-style: bold; color:green;">&#187;</it> finds it as an easily guessable type.

</p><p>

Consider now the following code:
<pre class="l42Big"><![CDATA[
xs = Nums[ 10\; 20\; 30\ ]
ys = Nums[ \"-1"; \"2/3"; 3\ ]
points = Points[]
for x in xs, y in ys (
  points.add(\(x=x, y=y))// here \ is Point
  )
Debug(points) //prints
//[Point(x=10, y="-1"); Point(x=20, y="2/3"); Point(x=30, y=3)]
]]></pre>
As you can see, we can use <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[for]]></span><it style="font-style: bold; color:green;">&#187;</it> to iterate on multiple collections at once.
<br/>
In 42 as in most other languages you can have blocks of code where multiple
<it style="font-style: italic;">local bindings</it> are introduced by associating a lowercase name with an initialization expression.
Similarly, the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[for]]></span><it style="font-style: bold; color:green;">&#187;</it> introduces local bindings whose values will range over collection elements by associating them with initialization expressions for iterators.


</p><h2> (5/5)First summary </h2> <p>

<ul><li>
At the start of your program, import a towel using 
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[reuse _]]></span><it style="font-style: bold; color:green;">&#187;</it>, as in <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[reuse [L42.is/AdamsTowel]]]></span><it style="font-style: bold; color:green;">&#187;</it>.
</li><li>
To define a simple class exposing its state and 
some methods working with those, use <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Data]]></span><it style="font-style: bold; color:green;">&#187;</it>, as in
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Point = Data:{Num x, Num y}]]></span><it style="font-style: bold; color:green;">&#187;</it>.
</li><li>
You can define methods in classes with the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[method]]></span><it style="font-style: bold; color:green;">&#187;</it> keyword.
Use <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[class method]]></span><it style="font-style: bold; color:green;">&#187;</it> for methods that can be called on the class object directly.
</li><li>
To introduce the concept of list for a certain type, use 
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Collection.list(_)]]></span><it style="font-style: bold; color:green;">&#187;</it>
<br/> as in the class declaration
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Points = Collection.list(Point)]]></span><it style="font-style: bold; color:green;">&#187;</it>
</li></ul>

</p><div style="margin-left: 30px;">
<h2> Object creation summary </h2> <p>
42 supports many different syntactic forms that are convenient for creating objects: 
<ul><li>
12Num:  from a numeric representation
</li><li>
S"foo":  from a string representation
</li><li>
Point(x=_,y=_):  from the parameter values
</li><li>
Points[_;_;_]:  from a variable length sequence of values.
</li></ul>

Note that in 42 these are all just expressions, and represent one or more methods in the named class.
This means that even concepts quite different from numbers, strings and collections may benefit from this syntactic support.
</p></div>
<p>
</p><h2> Digressions / Expansions </h2> <p>
Here, after the summaries, we will digress and expand
on topics related to the chapter. 
Digressions/expansions may be more technical and challenging, and may refer to any content in any of the other chapters, including the forward ones.
For example, we are now going to make some more precise remarks about:
</p><h2> Method selector </h2> <p>
In 42 a method selector is the method name plus the list of all the parameter names, in order.
Methods in a class must be uniquely identified by their method selectors.
This provides a good part of the expressive power of overloading, while avoiding all the complexities of type driven overloading resolution.

<br/>
<div class="index"><div class="wrapFloat"><div class="inFloat">
</div><div class="inFloat">
&nbsp; &nbsp; &nbsp; <a href="tutorial_01Basics.xhtml"> Previous </a>...<a href="tutorial_02ModifiersIntro.xhtml"> Next </a>
</div></div><div class="finishFloat"></div></div>
<br/>

        </p>
        </div>
      </div>
      <div id="footerwrap">
        <div id="footer">
          <ul style='padding: 10px;'>
            <li style='display:inline;'>
            <a href="mailto:marco.servetto@gmail.com" rel="me">Contact Us</a> |</li>
            <li style='display:inline;'>
            <a href= "http://ecs.victoria.ac.nz/mailman/listinfo/team42">Mailing list</a> |</li>
          </ul>
        </div>
      </div>
    </div>

	
  </body>
</html>

