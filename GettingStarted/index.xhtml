<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <link rel="stylesheet" type="text/css" href="css/style.css" media="all"/>
    <link rel="shortcut icon" href="css/favicon.ico"/>
    <title>42 - Metaprogramming as default</title>
    <style type="text/css" media="screen">

      .ace_editor {
        border: 1px solid lightgray;
        margin: auto;
        height: 200px;
        width: 80%;
      }
      .scrollmargin {
        height: 80px;
            text-align: center;
      }
    </style>
  </head>
  <body>
    <div id="wrapper">
      <div id="headerwrap">
        <div id="header">
          <img style='float:left;'
            src='css/logo.png' alt='42'/>
          <h1 style='float:left;'>
            <p style='font-size:150%; color:rgb(250,250,250);'>42 - The definitive answer to design, code and everything</p>
            <p style='font-size:100%; color:rgb(250,250,250);'> --But you are not going to like it</p>
          </h1>
        </div>
      </div>
      <div id="contentwrap">
        <div id="content">
<p>
</p><h2> Why 42 </h2> <p>
42 is a new programming language,
the name is inspired by The Hitchhiker's Guide to the Galaxy.
The language goal is to allow the transparent cooperation and composition of millions of libraries at the same time.
</p><p>
In 42 you will be able to import libraries just by naming them and to
compose them in your code without worrying of their dependencies.
Normally libraries are big monolitic things, coming from outside and manually imported/installed. The user have little control on
the library code, and the library have no influence on the importing context.
</p><p>
In 42 Libraries are usually much smaller and are first class entities, that can be manipulated as values,loaded, stored, modified, adapted, saved or simply used. You will write code that manipulate libraries, but more importantly you will use libraries that manipulate libraries in non trivial ways.
Indeed in 42 manipulating libraries is so natural that is convenient to think of your own code as a library that you offer to yourself only.
</p><p>
42 enforce a high level of abstraction, thus there is no access to primitive
structures like arrays (just use collections), and there is no concept of null or default initialization.
While is possible to write in a fully functional style in 42, usually 42 programs mix <span style="color:#ff1111; font-weight: bold;">mutable datastructure with aliasing</span> and <span style="color:#ff1111; font-weight: bold;">deeply immutable data</span>. Indeed 42 offers powerful support for aliasing control and immutability, helping in mixing the two stiles in an easy and natural way.

</p><p>
42 offers (well, will offer) automatic parallelism: thanks to immutability and aliasing control, many patterns of normal sequential code will be safely be executed in parallel.


</p><h2> (1) Objects and Classes </h2> <p>

</p><h2> Object orientation </h2> <p>
42 is a pure object oriented language,
where every value is an object. This means that:
<ul>
<li>
Numbers are objects,
so thay can have methods like <span class="code"><![CDATA[.sqrt()]]></span> or <span class="code"><![CDATA[.abs()]]></span>.
</li><li>
All operators are just method calls, thus <span class="code"><![CDATA[a + b]]></span> is sugar for <span class="code"><![CDATA[a.operator+(b)]]></span>, and so on. Note how <span class="code"><![CDATA[operator+]]></span> is a valid method name.
Any class that offers that method supports the operator.

</li><li>
Classes are objects, when you write <span class="code"><![CDATA[Foo.bar()]]></span> you refer to the method <span class="code"><![CDATA[.bar()]]></span> offered by the object denoted by <span class="code"><![CDATA[Foo]]></span>.
class objects are just objects, and you can also store them in local bindings if you wish, as in <span class="code"><![CDATA[x=Foo]]></span>
</li><li>
The code is an object, but only at the granularity of
Libraries, that is, balanced pairs of curly brackets representing classes (or interfaces) with methods and nesteds.
This is usefull for meta-programming, as we will see later this is the most important feature of 42.


</li><li>
Differently from other pure object oriented languages, in 42
all objects have the same treatment, both syntactically and semantically.
For example <span class="code"><![CDATA[x = S"Hello " ++ S"World"]]></span>
This is a declaration for a local binding <span class="code"><![CDATA[x]]></span>, using the string class <span class="code"><![CDATA[S]]></span> and the operator <span class="code"><![CDATA[++]]></span>,
used as string (or in general sequence/collection) concatenation.

Coming from another programming language, you many be surprised that we have to write <span class="code"><![CDATA[S]]></span> before <span class="code"><![CDATA["Hello "]]></span> and <span class="code"><![CDATA["World"]]></span>.
This extra verbosity is need to provide fair treatment to all classes. (<a href= "note1.xhtml">see more</a>)
In 42 we do not give preferential treatment
to special object/classes. In this sense, we consider
most other languages to be racist.
They give priority to their "preferred" version of numbers and strings, and this puts into a position of unfair disadvantage library code trying to define its own numbers kinds.
Instead in 42 you may encounter strings like <span class="code"><![CDATA[URL"www.google.com"]]></span>,
 <span class="code"><![CDATA[EMAIL"Artur.Dent@gmail.com"]]></span> or multiline strings like
 <pre class="l42"><![CDATA[Javascript"
'x=function(){
'  alert("hello world";)
'  }
' x()
"]]></pre>

The same for numeric classes: to talk about a street, 20 meters long, you would write
<span class="code"><![CDATA[streetLenght=20Meter]]></span>.
Note that we write the class name after the number, both for better readability and because <span class="code"><![CDATA[Meter20]]></span> would be consider an identifier by the parser.
You may encounter <span class="code"><![CDATA[Int]]></span>, <span class="code"><![CDATA[UInt]]></span>, <span class="code"><![CDATA[Float]]></span>, <span class="code"><![CDATA[Meter]]></span>, <span class="code"><![CDATA[Kg]]></span>, <span class="code"><![CDATA[Second]]></span>, <span class="code"><![CDATA[Year]]></span>, <span class="code"><![CDATA[PhoneNumber]]></span> and many other numeric classes.
</li></ul>

</p><h2> Simple hello world program </h2> <p>
Let show now a simple hello world program:
<pre class="l42"><![CDATA[
{reuse L42.is/AdamTowel2
Main:{
  Debug(S"Hello world")
  return ExitCode.success()
  }
}
]]></pre>
At the right of <span class="code"><![CDATA[Main:]]></span> we write the expression/statements that
we wish to execute. <span class="code"><![CDATA[Main]]></span> is not a method, and <span class="code"><![CDATA[Main]]></span> is not special name either. In 42 there is no concept of main method as in
Java or C. For now you can think of <span class="code"><![CDATA[Main:]]></span> as a top level command, we will understand later how this fits with the general language design.

When we write <span class="code"><![CDATA[reuse L42.is/AdamTowel]]></span> we are asking 42 to
reuse the code offered by the library offered in the internet address
<span class="code"><![CDATA[L42.is/AdamTowel]]></span>.
AdamTowel is our Towel, that is the set of classes and interfaces that we wish to start from (<a href= "towel.xhtml">see more on towels</a>).
<span class="code"><![CDATA[L42.is]]></span> is the main website of 42, where most commonly used libraries are hosted. To reuse code you need internet connection; but this also means that you will never have to manually import any code. Required code will be transitivelly downloaded and cached on your machine, you need not to be aware of the existence of this mechanism.
</p><p>
We are not supposed to always start from AdamTowel, there are many interesting towels out there, and you may also become skilled in the
advance technique of towel embroidery.
</p><p>
Lets now declare a method and call it.
<pre class="l42"><![CDATA[
{reuse L42.is/AdamTowel2
MyCode:{
  class method
  S hello(S name){
    return S"hello "++name
    }
  }
Main:{
  Debug(MyCode.hello(name=S"world"))
  return ExitCode.success()
  }
}
]]></pre>
Here we declare a class to host our <span class="code"><![CDATA[hello(name)]]></span> method.
We write <span class="code"><![CDATA[class method]]></span> to declare a method that can be called on the class object, as in <span class="code"><![CDATA[MyCode.hello(name=S"world")]]></span>. This is equivalent to a static method in languages like Java or C++.

</p><p>
Note how the method is called using the parameter name explicitly.
We believe this increase readability.
</p><p>
You can also notice how there are two different usages for curly brackets: if there is at least a return keyword it is a set of statements,
otherwise is a library literal, and can contains methods and nesteds.
A nested (class or interface) is denoted by an upper-case name, and can be obtained by a library literal or an expression producing a library literal.
A library can be a class (default case) or an interface (starts with the <span class="code"><![CDATA[interface]]></span> keyword).
A nested in 42 is similar to a static inner class in Java, or a nested class in C++. It is just a convenient way to divide in a tree shape the various components of our program.
</p><p>
The class <span class="code"><![CDATA[MyCode]]></span> of before offers a single class method, have no fields and you can not create instances of <span class="code"><![CDATA[MyCode]]></span>, since no factory is present; you can think about it as a module.
In 42 we do not have constructors. Objects are created by factory methods. We believe this is a much simpler and consistent approach to object initialization.

</p><h2> Simple class with internal state </h2> <p>
Let create now a class with state and factory:
<pre class="l42"><![CDATA[
Point:Data<<{
  Int x
  Int y
  method
  Point add(Int x)
    Point(x=x+this.x(), y=this.y())
  Point add(Int y)
    this.with(y=y+this.y())
  }
]]></pre>
Here you can see we declare a <span class="code"><![CDATA[Point]]></span> class with <span class="code"><![CDATA[x]]></span> and <span class="code"><![CDATA[y]]></span> <span class="code"><![CDATA[Int]]></span> coordinates.
<span class="code"><![CDATA[Data]]></span> is a decorator. Decorators are classes/objects that offers an operator <span class="code"><![CDATA[<<]]></span>, called the babel fish operator,
whose goal is to translate a library into a "better" library.
In this case, <span class="code"><![CDATA[Data]]></span> is translating the class <span class="code"><![CDATA[{Int x , Int y}]]></span> into a much longer class, with
a factory method taking in input the fields and initializing them, but also containing
 boring but useful definitions for
equality, inequality, conversions from and into human readable strings, xml and binary representations for (de)serialization.
</p><p>
Finally, we declare methods to add to a single coordinate.
For very short methods we can omit the curly brackets and return.
Indeed method bodies are just expressions, and the curly brackets turn statements into expressions.

In the method <span class="code"><![CDATA[add(x)]]></span> we show a constructor call and getters.
In the method <span class="code"><![CDATA[add(y)]]></span> we show an improved version, using the <span class="code"><![CDATA[with]]></span> method, another gift of Data, that allows us to easily create a clone with a
single field updated.
We can declare two methods, <span class="code"><![CDATA[add(x)]]></span> and <span class="code"><![CDATA[add(y)]]></span> with the same name, if parameter names are different.
</p><p>
Note how we use always getters and we never access fields directly.
In many other languages we can use write <span class="code"><![CDATA[a.fieldName]]></span> and <span class="code"><![CDATA[a.fieldName=newValue]]></span>. Such syntax do not exists in 42. Same goes for object instantiation; in many languages there is a special <span class="code"><![CDATA[new ClassName(..)]]></span> dedicated syntax, while in 42 it is just a method call.
</p><p>
Also, similarly to what happens in python, we need to use <span class="code"><![CDATA[this.methodName()]]></span> to call methods when the receiver is <span class="code"><![CDATA[this]]></span>.
While this makes some code more verbose, save us from the burden of method hiding.



</p><h2> Decorators </h2> <p>
Decorators are one of the main concepts used by 42 programmers. We will encounter many decorators in this tutorial.
For now, just get used to the pattern of writing
<span class="code"><![CDATA[<<]]></span> to go from a minimal chunk of code, with method declarations for the important bits, to a fully fledged usable class.
<a href= "Decorators.xhtml">More on decorators</a>

</p><h2> Object creation , recall </h2> <p>
42 supports many different syntactic forms that are convenient to create objects:
<ul><li>
12Int: from a numeric representation
</li><li>
S"foo": from a string representation
</li><li>
Point(x=_,y=_): from the parameter values
</li><li>
Points[_;_;_]: from a variable length sequence of values; for example <span class="code"><![CDATA[Points]]></span> can be a list of <span class="code"><![CDATA[Point]]></span>. We can instantiate <span class="code"><![CDATA[Points]]></span> by using the square brakets as shown later.
</li></ul>

Note that in 42 those are all just expressions, and represents methods in the named class.
Sometime is convenient to reuse this kind of syntax to get better syntactic support for certain operations; for example the string class use square brakets to support string formatting.
<a href= "S.xhtml">To understand it better: a guide to the S class</a>


</p><h2> (2) Modifiers , kinds of classes/references/objects </h2> <p>

</p><h2> Kinds of classes </h2> <p>
<span class="code"><![CDATA[Point]]></span> is a <span style="color:#ff1111; font-weight: bold;">Immutable class</span>: none of its field can be updated or mutated.
Immutable classes are very easy to use but may be inadequate when representing real objects, whose state can mutate across time.
A <span style="color:#ff1111; font-weight: bold;">Mutable class</span> is a class where the state of (some of) its instances may be mutated.

Lets now declare a <span class="code"><![CDATA[Animal]]></span> mutable class, whose location can be updated.
<pre class="l42"><![CDATA[
Animal:Data<<{
  var Point location
  mut method
  Void run()
    this.location(this.location().add(x=20Int))
  }
]]></pre>
There are two new keywords used here:
<ul><li>
the <span class="code"><![CDATA[location]]></span> field is declared <span class="code"><![CDATA[var]]></span>.
  This is called a variable field, and can be updated by calling a setter.
  Non variable fields can not be updated
</li><li>
  the modifier "mut" in front of the method.
  We have seen "class" already, an we have seen methods with the default modifier ( add(x) and add(y) ).
  mut methods can mutate the "this" object. If you have experience with C++ you can see the similarity with <span class="code"><![CDATA[const]]></span> methods.
  immutable (default) methods works only on immutable "this" objects. We will see later much more about modifiers
</li></ul>

</p><p>
As you see, we are using the <span class="code"><![CDATA[add]]></span> method from before.
Also notice that we are using a setter here, where we are providing the first parameter without the argument name.
While usual in other languages, in 42 parameters are passed
by name.
However, for some methods with a single parameter writing down the parameter name would not improve the readability and just add noise.
In those cases the first parameter is conventionally called <span class="code"><![CDATA[that]]></span>,
and writing <span class="code"><![CDATA[a.b(that=c)]]></span>
is equivalent to writing <span class="code"><![CDATA[a.b(c)]]></span>.
This works also for methods with multiple parameters, if the first one is called <span class="code"><![CDATA[that]]></span>.
We can use an animal by writing, for example:

<pre class="l42"><![CDATA[
  dog=Animal(location=Point(x=0Int, y=0Int))//type of the reference inferred
  mut Animal dogAlias=dog //this is the exact type 
  dog.run()
]]></pre>

</p><h2> Interaction between mutable and immutable </h2> <p>

We now explore some interaction between mutable and immutable objects.
<pre class="l42"><![CDATA[
Animal:Data<<{
  var Point location
  mut Points path
  mut method
  Void move()
    this.location(path.first()))
    this.path().removeFirst()
  }
]]></pre>


Here we use <span class="code"><![CDATA[mut Points path]]></span> to denote a mutable list of points. Note the absence of <span class="code"><![CDATA[var]]></span>; this is conceptually similar to a <span class="code"><![CDATA[Points * const path;]]></span> in C++ or <span class="code"><![CDATA[final Points path;]]></span> in Java.
To contrast, the declaration <span class="code"><![CDATA[var Point location]]></span> is similar to
<span class="code"><![CDATA[Point const * location;]]></span> in C++ or <span class="code"><![CDATA[ImmPoint location;]]></span> in Java (for an opportune <span class="code"><![CDATA[ImmPoint]]></span> class).
That is,
mutable objects can be referred using mutable references,
Immutable objects can be referred using immutable references.

This code models an animal following a path. It can be used like this.
<pre class="l42"><![CDATA[
  zero=Point(x=0Int, y=0Int)
  ps1=Points[ Point(x=12Int, y=20Int);Point(x=1Int, y=2Int)]
  ps2=Points[ zero;Point(x=1Int, y=2Int)]
  dog1=Animal(location=zero, path=ps1)
  dog2=Animal(location=zero, path=ps2)
  dog1.move()
  dog2.move()
]]></pre>

In this code the first dog goes to 12:20.
The secon dog goes to 0:0.

This code involve a mutable animal with a mutable field. This is often
a terrible idea, since its behaviour may depend on aliasing: what happens if two dogs follow the same paths?
<pre class="l42"><![CDATA[
  zero=Point(x=0Int, y=0Int)
  ps=Points[ Point(x=12Int, y=20Int);Point(x=1Int, y=2Int)]
  dog1=Animal(location=zero, path=ps)
  dog2=Animal(location=zero, path=ps)
  dog1.move()
  dog2.move()
]]></pre>
The first dog moves and consumes the path also for the second one.
That is, the first goes to 12:20 and the second goes to 1:2.

This is because <span class="code"><![CDATA[Animal]]></span> is now a <span style="color:#ff1111; font-weight: bold;">Deeply mutable class</span>: a mutable class with mutable fields.
An amazing amount of bugs is caused by the usage of deeply mutable classes.
This triky behaviour is correct for a
deeply mutable class.
In 42 we can change <span class="code"><![CDATA[Animal]]></span> to prevent this aliasing issue.
<pre class="l42"><![CDATA[
Animal:Data<<{
  var Point location
  capsule Points path
  mut method
  Void move()
    this.location(path.first()))
    this.path().removeFirst()
  }
]]></pre>
Now we use the modifier "capsule", this requires the field to be encapsulated with respect to aliasing.
Immutable objects do not influence aliasing, so they are free from aliasing limitations.

</p><p>
The "capsule" modifier <span style="color:#ff1111; font-weight: bold;">enforce</span> the users to provide well encapsulated values, and <span style="color:#ff1111; font-weight: bold;">ensure</span> the <span class="code"><![CDATA[Animal]]></span> data is well encapsulated.
</p><p>

Now the code of before would not compile. However we can still write the following variant
<pre class="l42"><![CDATA[
  zero=Point(x=0Int, y=0Int)
  capsule Points ps=Points[ Point(x=12Int, y=20Int);Point(x=1Int, y=2Int)]
  dog1=Animal(location=zero, path=ps)
  dog2=Animal(location=zero, path=Points[ Point(x=12Int, y=20Int);Point(x=1Int, y=2Int)])
  dog1.move()
  dog2.move()
]]></pre>
Where the <span class="code"><![CDATA[ps]]></span> local binding is declared capsule, thus it can satisfy the Animal.path requirement, but it can be used only once.
dog2 have to use another capsule. It is ok to just write the object creation in place as is done.
Alternativelly, most classes offers a <span class="code"><![CDATA[clone()]]></span> method,
in this case we could write

<span class="code"><![CDATA[dog2=Animal(location=zero, path=dog1.ps().clone())]]></span>



</p><h2> Immutable objects of Mutable classes </h2> <p>

How can we get an immutable <span class="code"><![CDATA[Animal]]></span>?
When an <span class="code"><![CDATA[Animal]]></span> is created using <span class="code"><![CDATA[Animal(location=__,path=__)]]></span> we create a <span class="code"><![CDATA[mut Animal]]></span>.

In most cases you can promote such reference to immutable/capsule; just make the type of the local binding explicit.
 The type system will take care of the rest.
If a reference can not be safely promoted to immutable/capsule, you may have to use the <span class="code"><![CDATA[.clone()]]></span> method or to refactor your code.
<pre class="l42"><![CDATA[
  mut Animal dog1=Animal(__)//no promotion here
  Animal dog2=Animal(__)//promotion mutable->immutable
  dog1.move()
  //dog2.move() //ill-typed, requires a mut Animal
]]></pre>

We will explain later the exact rules for promotion,
the main idea is that if the initialization expression uses local bindings in a controlled way, then promotion can be applied.
For example, a mutable expression using only capsule or immutable references can be promoted to capsule/immutable.

</p><h2> read </h2> <p>

Use "read" when you do not care what is the mutability of an object.
For example, we could add to <span class="code"><![CDATA[Animal]]></span>

<pre class="l42"><![CDATA[
read method
Bool isArrived()
  this.path().isEmpty()
]]></pre>
This method can be called to mutable and immutable animals:

<pre class="l42"><![CDATA[
 Debug(dog1.isArrived())
 Debug(dog2.isArrived())
]]></pre>

</p><h2> Kinds of classes , recall </h2> <p>

<ul>
<li>
immutable classes: have only immutable fields.
It is usefull to model mathematical concepts.
It is easy to reason about code using immutable classes,
but some properties of real objects can be better modelled with state mutation.
</li><li>
shallow mutable classes: have only (variable) fields of immutable or capsule type (or class, as we will see later).
Reasoning with shallow mutable classes is near as easy as reasoning with immutable ones, and often more natural.
</li><li>
deep mutable classes: have mutable fields.
Reasoning with deep mutable classes can be very hard.
</li></ul>

</p><h2> Modifiers up to now , recall </h2> <p>

<ul>
<li>
immutable: the default, when you omit the modifier,
 you mean immutable.
An immutable reference points to an object that is never changing. Its whole reachable object graph never change and is immutable as well.

</li><li>
mutable: A mutable reference behave like normal reference in Java, C#,C++, Python and many other languages.
Mutable references allows to mutate the referred object.
</li><li>
capsule: local capsule references are used only once and they guaranteed that the whole reachable object graph is reachable only thought that
capsule reference.
Local Capsule references provide a structured way to reason over deep mutable objects.

Fields can be annotate capsule, the meaning is that they need to be initialized/updated with capsule variables.
We will discuss more about capsule fields and how they differs from capsule local binding later.

</li><li>
read: A readable reference can not be used to mutate the referred object; but other mutable references pointing to the same object can mutate it.
Read references can point to both mutable and immutable objects.
It is easy to confound between read and immutable references.
As a rule of thumb, if you are in doubt if you should use an immutable or a readable, you probably want an immutable reference.

</li><li>

class: class references denote the class object,
  on methods the meaning is the same of static methods in many languages, but it can consistently be used on parameters/local variables/fields
to encode behaviours similar to dependency injection.


</li><li>
lent: we still need to see the lent modifier; a hygienic mutable reference allowing mutation but not storage (more on lent later).
</li></ul>



</p><h2> Kinds of objects , recall </h2> <p>

<ul>
<li>
immutable: objects
 can be instances of immutable classes, or promoted instances of mutable classes.
 They
can be referred only by immutable and read references.
</li><li>
mutable: objects are instances of mutable classes.
They can be referred by capsule, mutable, lent and read references.
</li><li>
class: objects are instances of themselves.
They can be referred only by class references, either of their class or of one transitivelly implemented interface.
</li></ul>




</p><h2> (3) not ready to read yet Libraries </h2> <p>

</p><h2> Libraries </h2> <p>
42 stands for the primate of libraries, so let see some libraries in action.
We have already see how to chose a towel, and many classes that are likely to be present in such towel, like
Int and Data.
Let see now how to load a library from its url:
<pre class="l42"><![CDATA[
{reuse L42.is/2
Gui: Load<<{reuse L42.is/Gui}
Main:{
  Gui.alert(S"hi!")
  return ExitCode.success()
  }
}
]]></pre>
Load is another decorator, here it modifies the library found in L42.is/Gui so that it can be used easly from AdamTowel.
<pre class="l42"><![CDATA[
{reuse L42.is/AdamTowel2
Collections: Load<<{reuse L42.is/Collections}
Point:Data<<{Int x, Int y}
Points:Collections.vector(of:Point)
Main:{
  ps=Points[ Point(x: 12Int, y: 20Int);Point(x: 1Int, y=2Int);]
  var tot=0
  with p in ps (tot+=p.x()+p.y())
  return ExitCode.success()
  }
}
]]></pre>
A very large class of practically useful programs can be obtained by just declaring smart structs using Data and Collections.




</p><h2> Collections </h2> <p>
Declaring and using collections is simple and easy in 42.
For example, we can declare and use a list of <span class="code"><![CDATA[Point]]></span> by writing
<pre class="l42"><![CDATA[
Points:Collections.mutList(Point)

...

zero=Point(x: 0Int, y: 0Int)
one=Point(x: 1Int, y: 1Int)
ps0=Points[]//the empty list
ps1=Points[zero;one]//contains zero, one
ps2=Points[zero;one]//contains zero, one

]]></pre>



<!--<pre class="l42"><![CDATA[ Library myCode={ method Int foo()} ]]></pre>
A local binding of type Library initialized with a class with a single <span class="code"><![CDATA[foo()]]></span> method. Since there is no body, it is an abstract method.
 -->

 <!--</p><h2> Simpler complete program </h2> <p>

Let now starts showing the simplest 42 program: an empty library.

<pre class="l42"><![CDATA[ {} ]]></pre>

If we save this valid program in a file <span class="code"><![CDATA[Test.L42]]></span> and we run <span class="code"><![CDATA[L42 Test]]></span>, we get an error.
</p><p>
As you see 42 is very intuitive, as you would expect from your former life experiences, most simple things just does not work.
Note how valid programs can produce errors.
We will soon learn how to produce errors in controlled and elegant ways.
-->
<!--A 42 program execution <span style="color:#ff1111; font-weight: bold;">is</span> the generation of all its nested classes/interface.
, code is simply executed from top to bottom as in
Python, Javascript or Php. However, the
top level expression is a Library, and code can go in libraries
as an initializer for you need to put the code into an expression
-->

<!-- LATER?
<span class="code"><![CDATA[MyCode.hello(..)]]></span> use directly the <span class="code"><![CDATA[MyCode]]></span> class instance as receiver. We can also give it a name
e se vuoi puoi anche salvarlo su un binding locale, tipo x=MyCode x.hello(...)
-->

        </p>
        </div>
      </div>
      <div id="footerwrap">
        <div id="footer">
          <ul style='padding: 10px;'>
            <!--<li style='display:inline;'><a href="http://ecs.victoria.ac.nz/Main/MarcoServetto" >Contact Us</a> |</li>
            <li style='display:inline;'><a href="http://www.victoria.ac.nz/ecs/disclaimer">Disclaimer</a> |</li>
            <li style='display:inline;'><a href="http://www.victoria.ac.nz/ecs/accessibility" >Site Accessibility</a></li>
   -->
          </ul>
          <p class="update">Page Updated: 22/12/2014&nbsp;&nbsp;</p>
        </div>
      </div>
    </div>

    <script src="../ace/ace.js"></script>
    <script>

        // Get every l42 Div
        var list = document.getElementsByClassName("l42");
        for (var i = list.length - 1; i >= 0; i--) {

          // Turn it into an ace window and apply features
          var l42Box = ace.edit(list[i]);
          l42Box.setTheme("ace/theme/l42_sublime");
          l42Box.getSession().setMode("ace/mode/l42");
          l42Box.setOption("maxLines", 30);
          l42Box.setReadOnly(true);  // false to make it editable

          // If our code as unrequired spaces at the front or back of the code. Remove them.
          function trimValue(){
            var text = l42Box.getValue();
            return "\n"+text.trim();
          };
          l42Box.setValue(trimValue(),-1);
        }
    </script>

  </body>
</html>
