<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <link rel="stylesheet" type="text/css" href="css/style.css" media="all"/>
    <link rel="shortcut icon" href="css/favicon.ico"/>
    <title>42 - Metaprogramming as default</title>
  </head>
  <body>
    <div id="wrapper">
      <div id="headerwrap">
        <div id="header">
          <img style='float:left;'
            src='css/logo.png' alt='42'/>
          <h1 style='float:left;'>
            <p style='font-size:150%; color:rgb(250,250,250);'>42 - The definitive answer to design, code and everything</p>
            <p style='font-size:100%; color:rgb(250,250,250);'> --But you are not going to like it</p>
          </h1>
        </div>
      </div>
      <div id="contentwrap">
        <div id="content">
<p>
</p><h2> Object orientation </h2> <p>
42 is a pure object oriented language,
where every value is an object.
If you come from other languages like Java this means that
<ul>
<li>
Numbers are objects, so thay can have methods like <span class="code"><![CDATA[.sqrt()]]></span> or <span class="code"><![CDATA[.abs()]]></span>.
</li><li>
All operators are just method calls, thus <span class="code"><![CDATA[a+b]]></span> is sugar for <span class="code"><![CDATA[a.operator+(b)]]></span>, and so on.
Any class that offers that method can support such operator.

</li><li>
Classes are objects, when you write <span class="code"><![CDATA[Foo.bar()]]></span> you refer to the method <span class="code"><![CDATA[.bar()]]></span> offered by the object denoted by <span class="code"><![CDATA[Foo]]></span>.
class objects are just objects, and you can also store them in local bindings if you wish, as in <span class="code"><![CDATA[x=Foo]]></span>
</li><li>
The code you write is an object, but only at the granularity of
Libraries, that is, balanced pairs of curly brakets representing classes (or interfaces) with methods and nesteds, as in
<pre class="l42"><![CDATA[ Library myCode={ method Int foo()} ]]></pre>
A local binding of type Library initialized with a class with a single <span class="code"><![CDATA[foo()]]></span> method. Since there is no body, it is an abstract method.

</li><li>
Differently from other pure object oriented languages, in 42
all objects have the same treatement, both syntactically and semantically.
For example <span class="code"><![CDATA[x=40Int+2Int]]></span>
This is a declaraton for a local binding <span class="code"><![CDATA[x]]></span>.
Coming from another programming language, you many be suprised that we have to write <span class="code"><![CDATA[Int]]></span> after 40 and 2.
This extra verbosity is need to provide fair treatement to all classes. (<a href= "note1.xhtml">see more</a>)
In 42 we do not give preferencial treatement
to special object/classes. In this sense, we consider
most other languages to be racist.
They give priority to their "preferred" version of numbers and strings, and this puts into a position of unfair disadvantage library code trying to define its own numbers kinds.
Reading 42 code you may encounter Int, UInt, Float, Meter, Kg, Second, Year, PhoneNumber and many other numeric classes.
In the same way, to print a debug message you may see
<span class="code"><![CDATA[Debug(S"My Message")]]></span>
where the S is the stringable type, but you may encounter
<span class="code"><![CDATA[URL]]></span>, <span class="code"><![CDATA[URI]]></span>, <span class="code"><![CDATA[PROLOG]]></span>, <span class="code"><![CDATA[EMAIL]]></span>
and many other stringable types.
</li></ul>

</p><h2> Simpler complete program </h2> <p>

Let now starts showing the simplest 42 progam: an empty library.

<pre class="l42"><![CDATA[ {} ]]></pre>

If we save this valid program in a file <span class="code"><![CDATA[Test.L42]]></span> and we run <span class="code"><![CDATA[L42 Test]]></span>, we get an error.
</p><p>
As you see 42 is very intuitive, as you whould expect from your former life experiences, most simple things just does not work.
Note how valid programs can produce errors.
We will soon learn how to produce errors in controlled and elegant ways.
</p><h2> Simple hello world program </h2> <p>
Let show now a simple hello world program:
<pre class="l42"><![CDATA[
{reuse L42.is/AdamTowel
Main:{
  Debug(S"Hello world")
  return ExitCode.success()
  }
}
]]></pre>
<span style="color:#ff0000">Marco:cosa pensiamo di questa alternativa?</span>
<pre class="l42"><![CDATA[
{L42.is/AdamTowel
Main:{
  Debug.log(S"Hello world")
  return {}
  }
}
]]></pre>

Here AdamTowel is our Towel, that is the set of classes and interfaces that we wish to start from.
</p><p>
We are not supposed to always start from AdamTowel, there are many interesting towels out there, and you may also become skilled in the
advance technique of towel embrowdery.
</p><p>
Lets now declare a method and call it.
<pre class="l42"><![CDATA[
{reuse L42.is/AdamTowel
MyCode:{
  class method
  S hello(S name){
    return S"hello "++name
    }
  }
Main:{
  Debug(MyCode.hello(name=S"world"))
  return ExitCode.success()
  }
}
]]></pre>
Here we declare a class to host our hello(name) function.
The ++ is used as string (or in general sequence/collection) concatenation.

Note how the method is called using the parameter name explicitly.
We believe this increase readibilty.
</p><p>
You can also notice how there are two different usages for curly brakets: if there is at least a return keyword it is a set of statements,
otherwise is a library literal, and can contains methods and other nested.
A nested is denoted by an uppercase name, and can be obtained by a library literal or an expression producing a library literal.
A library can be a class (default case) or an interface (starts with the <span class="code"><![CDATA[interface]]></span> keyword)
</p><p>
The class <span class="code"><![CDATA[MyCode]]></span> of before offers a single class method, similar to static methods in many languages.
You can not create instances of <span class="code"><![CDATA[MyCode]]></span>, since no factory is present; you can think about it as a module.
Let create now a class with state and factory:
<pre class="l42"><![CDATA[
Point:Data<<{
  Int x
  Int y
  method
  Point add(Int x)
    Point(x=x+this.x(), y=this.y())
  Point add(Int y)
    this.with(y=y+this.y())
  }
]]></pre>
Here you can see we declare a <span class="code"><![CDATA[Point]]></span> class with <span class="code"><![CDATA[x]]></span> and <span class="code"><![CDATA[y]]></span> <span class="code"><![CDATA[Int]]></span> coordinates.
<span class="code"><![CDATA[Data]]></span> is a decorator. Decorators are classes/objects that offers an operator <span class="code"><![CDATA[<<]]></span>, called the babel fish operator,
whose goal is to translate a library into a "better" library.
In this case, <span class="code"><![CDATA[Data]]></span> is translating the class <span class="code"><![CDATA[{Int x , Int y}]]></span> into a much longer class, with
a factory method taking in input the fields and initializing them, but also containing
 boring but usefull definitions for
equality, inequality, conversions from and into human readable strings, xml and binary representations for (de)serialization.
</p><p>
Finally, we declare methods to add to a single coordinate.
For very short methods we can omit the curly brakets and return.
Indeed method bodies are just expressions, and the curly brakets turn statements into expressions.

In the method <span class="code"><![CDATA[add(x)]]></span> we show a constructor call and getters.
In the method <span class="code"><![CDATA[add(y)]]></span> we show an improved version, using the with method, another gift of Data, that allows us to easly create a clone with a
single field updated.
We can declare two methods, <span class="code"><![CDATA[add(x)]]></span> and <span class="code"><![CDATA[add(y)]]></span> with the same name, if parameter names are different.

</p><h2> Decorators </h2> <p>
Decorators are one of the main concepts used by 42 programmers. We will encounter many decorators in this tutorial.
For now, just get used to the pattern of writing
<span class="code"><![CDATA[<<]]></span> to go from a minimal chunk of code, with method declarations for the important bits, to a fully fledged usable class.
<a href= "Decorators.xhtml">More on decorators</a>

</p><h2> Kinds of classes </h2> <p>
<span class="code"><![CDATA[Point]]></span> is a <span style="color:#ff1111; font-weight: bold;">Immutable class</span>: none of its field can be updated or mutated.
Immutable classes are very easy to use but may be inadeguate when representing real objects, whose state can mutate across time.
A <span style="color:#ff1111; font-weight: bold;">Mutable class</span> is a class where the state of its instances may be mutated.

Lets now declare a <span class="code"><![CDATA[Animal]]></span> mutable class, whose location can be updated.
<pre class="l42"><![CDATA[
Animal:Data<<{
  var Point location
  mut method
  Void run()
    this.location(this.location().add(x=20Int))
  }
]]></pre>
As you see, we are using the add method from before.
You can also notice that we are using a setter here, and that we are providing the first parameter without the argument name.
This is accepted when writing down such name would not improve the readability, and in those cases the first parameter is convetionally called <span class="code"><![CDATA[that]]></span>.
More important, there are two new keyword:
<ul><li>
the location field is declared var.
  This is called a variable field, and can be updated by calling a setter.
  Non variable fields can not be updated
</li><li>
  the modifier "mut" in front of the method.
  We have seen "class" already, an we have seen methods with the default modifier ( add(x) and add(y) ).
  mut methods can mutate the "this" object. If you have experience with C++ you can see the similarity with const methods.
  immutable (default) methods works only on immutable "this" objects. We will see later much more about modifiers
</li></ul>

</p><h2> Interaction between mutable and immutable </h2> <p>

We now explore some interaction between mutable and immutable objects.
<pre class="l42"><![CDATA[
Animal:Data<<{
  var Point location
  mut Points path
  mut method
  Void move()
    this.location(path.first()))
    path.removeFirst()
  }
]]></pre>
This code models an animal following a path. It can be used like this.
This code involve a mutable animal with a mutable field. This is often
a terrible idea, since its behaviour may depend on aliasing: what happens with 2 dogs?
<pre class="l42"><![CDATA[
  zero=Point(x=0Int, y=0Int)
  ps=Points[ Point(x=12Int, y=20Int);Point(x=1Int, y=2Int)]
  dog1=Animal(location=zero, path=ps)
  dog2=Animal(location=zero, path=ps)
  dog1.move()
  dog2.move()
]]></pre>
The first dog moves and consumes the path also for the second one.
This is because <span class="code"><![CDATA[Animal]]></span> is now a <span style="color:#ff1111; font-weight: bold;">Deeply mutable class</span>: a mutable class with mutable fields.
An amazing amount of bugs is caused by the usage of deeply mutable classes.
 If this behaviour is not what you expected, we have to change <span class="code"><![CDATA[Animal]]></span> to prevent this aliasing issue.
<pre class="l42"><![CDATA[
Animal:Data<<{
  var Point location
  capsule Points path
  mut method
  Void move()
    this.location(path.first()))
    path.removeFirst()
  }
]]></pre>
Now we use the modifier "capsule", this requires the field to be encapsulated with respect to aliasing.
Immutable objects do not influence aliasing, so they are free from aliasing limitations.
Now the code of before would not compile. However we can still write the following variant
<pre class="l42"><![CDATA[
  zero=Point(x=0Int, y=0Int)
  capsule Points ps=Points[ Point(x=12Int, y=20Int);Point(x=1Int, y=2Int)]
  dog1=Animal(location=zero, path=ps)
  dog2=Animal(location=zero, path=Points[ Point(x=12Int, y=20Int);Point(x=1Int, y=2Int)])
  dog1.move()
  dog2.move()
]]></pre>
Where the ps local variable is declared capsule, thus it can satisfy the Animal.path requirement, but it can be used only onece.
dog2 have to use another capsule. It is ok to just write the object creation in place as is done.

</p><h2> Modifiers , recall </h2> <p>
We have now seen many different modifiers, lets recall them:
immutable: the default, when you omit the modifer, you mean immutable.
An immutable reference points to an object that is never changing. Its whole reachable object graph never change and is immutable as well.
mutable: A mutable reference...
capsule: capsule references are used only onece and they guaranteed that the whole reachable object graph is reachable only throught that
capsule reference.
Fields can be annotate capsule, the meaning is that they need to be initialized/updated with capsule variables.
class: class references denote the class object,
  on methods the meaning is the same of static methods in many languages, but it can consistently be used on parameters/local variables/fields
to encode behaviours similar to dependency injection.
We still need to see lent and read modifiers:
lent: a higienic mutable reference (more on lent later).
read: common supertype between immutable and mutable (and lent).
Use read when you do not care what is the mutability of an object.
For example, we could add to Animal
<pre class="l42"><![CDATA[
read method
Bool isArrived()
  this.path().isEmpty()
]]></pre>
This method can be called to mutable and immutable animals.
Wait.. how can we get an immutable Animal? just make the type of the local binding explicit. The type system will take care of the rest.
If a reference can not be safelly promoted to immutable/capsule, you may have to use the .clone() method.
<pre class="l42"><![CDATA[
  mut Animal dog1=Animal(__)
  Animal dog2=Animal(__)
  dog1.move()
  Debug(dog1.isArrived())
  //dog2.move()
  Debug(dog2.isArrived())
]]></pre>

</p><h2> Object creation , recall </h2> <p>

We have also seen many different sintactic forms to create objects: lets recall them:
12Int: from a numeric representation
S"foo": from a string representation
Point(x=_,y=_): from the parameter values
Points[_;_;_]: from a variable lenght sequence of values.

Note that in 42 those are all just expressions, and represents methods in the named class.
Sometime is convenient to reuse this kind of syntax to get better syntactic support for certain operations:

<a href= "S.xhtml">To understand it better: a guide to the S class</a>

</p><h2> Libraries </h2> <p>
42 stands for the primate of libraries, so let see some libraries in action.
We have already see how to chose a towel, and many classes that are likly to be present in such towel, like
Int and Data.
Let see now how to load a library from its url:
<pre class="l42"><![CDATA[
{reuse L42.is/AdamTowel
Gui: Load<<{reuse L42.is/Gui}
Main:{
  Gui.alert(S"hi!")
  return ExitCode.success()
  }
}
]]></pre>
Load is another decorator, here it modifies the library found in L42.is/Gui so that it can be used easly from AdamTowel.
<pre class="l42"><![CDATA[
{reuse L42.is/AdamTowel
Collections: Load<<{reuse L42.is/Collections}
Point:Data<<{Int x, Int y}
Points:Collections.vector(of:Point)
Main:{
  ps=Points[ Point(x=12Int, y=20Int);Point(x=1Int, y=2Int);]
  var tot=0
  with p in ps (tot+=p.x()+p.y())
  return ExitCode.success()
  }
}
]]></pre>
A very large class of practically useful programs can be obtained by just declaring smart structs using Data and Collections.



        </p>
        </div>
      </div>
      <div id="footerwrap">
        <div id="footer">
          <ul style='padding: 10px;'>
            <!--<li style='display:inline;'><a href="http://ecs.victoria.ac.nz/Main/MarcoServetto" >Contact Us</a> |</li>
            <li style='display:inline;'><a href="http://www.victoria.ac.nz/ecs/disclaimer">Disclaimer</a> |</li>
            <li style='display:inline;'><a href="http://www.victoria.ac.nz/ecs/accessibility" >Site Accessibility</a></li>
   -->
          </ul>
          <p class="update">Page Updated: 22/12/2014&nbsp;&nbsp;</p>
        </div>
      </div>
    </div>


  </body>
</html>
