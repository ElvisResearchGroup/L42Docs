<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <link rel="stylesheet" type="text/css" href="css/style.css" media="all"/>
    <script src="js/ace.js"></script>
    <script src="js/utils.js"></script>
    <link rel="shortcut icon" href="css/favicon.ico"/>
    <title>42 - Metaprogramming as default</title>
  </head>
  <body onload='doOnLoad();'>
    <div id="wrapper">
      <div id="headerwrap">
        <div id="header">
          <img style='float:left;'
            src='css/logo.png' alt='42'/>
          <h3 style='float:left;'>
            <p style='font-size:150%; color:rgb(250,250,250);'>42 - The definitive answer to design, code and everything</p>
            <p style='font-size:100%; color:rgb(250,250,250);'> --But you are not going to like it</p>
          </h3>
        </div>
      </div>
      <div id="contentwrap">
        <div id="content">
<p>

</p><h2> First, read in any order those introductions </h2> <p>
<Button class='button' type='button' onclick='selectDiv("a");'>
Why 42
</Button>
<Button class='button' type='button' onclick='selectDiv("b");'>
Learn by examples
</Button>

<Button class='button' type='button' onclick='selectDiv("c");'>
Pure OO
</Button>

<Button class='button' type='button' onclick='showAll(allDivs);'>
Show all content
</Button>


<Div id="a"><p>
</p><h2> Why 42 </h2> <p>
42 is a new programming language,
whose name is inspired by The Hitchhiker's Guide to the Galaxy.
The language's goal is to allow the transparent cooperation and composition of millions of libraries at the same time.
</p><p>
In 42 you will be able to import libraries just by naming them and to
compose them in your code without worrying about their dependencies.
Normally libraries are big monolithic things, coming from outside and manually imported/installed. The user has little control over
the library code, and the library has no influence over the importing context.
</p><p>
In 42 libraries are usually much smaller and are first class entities, that can be manipulated as values, loaded, stored, modified, adapted, saved or simply used. You will write code that manipulate libraries, but more importantly you will use libraries that manipulate libraries in non-trivial ways.
Indeed in 42 manipulating libraries is so natural that is convenient to think of your own code as a library that you offer to yourself only.
</p><p>
42 enforces a high level of abstraction, thus there is no access to primitive
structures like arrays (just use collections), and there is no concept of null or default initialization.
While is possible to write in a fully functional style in 42, usually 42 programs mix
<span style="color:#ff1111; font-weight: bold;"> mutable datastructures with aliasing </span>
and
<span style="color:#ff1111; font-weight: bold;"> deeply immutable data </span>.
42 offers powerful support for aliasing control and immutability, helping in mixing the two styles in an easy and natural way.

</p><p>
42 offers (well, will offer) automatic parallelism: thanks to immutability and aliasing control, many patterns of normal sequential code will be safely executed in parallel.

</p></Div>

<Div id="b"><p>
</p><h2> Learn by examples </h2> <p>
If you like to learn by examples, 
here you can find snippets of code in 42 and their equivalent version in Java.
We format the code so that, line by line, you can see the differences.


<!-- </p><h2>  </h2> <p>
<div class="compare">
<pre class="l42"><![CDATA[
]]></pre>

<pre class="java"><![CDATA[
]]></pre>
</div>-->

<!-- ############################################################################-->
<!-- ############################################################################-->
<!-- ############################################################################-->
<!-- ############################################################################-->
</p><h2> Imports and comments </h2> <p>
<div class="compare">
<pre class="l42"><![CDATA[
//42 code
//comment

/*multiline comment*/

reuse L42.is/AdamsTowel  //importing code
]]></pre>

<pre class="java"><![CDATA[
//(sort of) equivalent Java code 
//comment

/*multiline comment*/

import java.utils.ArrayList;  //importing code
...  //more and more importing code
import java.utils.List;  //eventually, end importing
]]></pre>
</div>


<!-- ############################################################################-->
<!-- ############################################################################-->
<!-- ############################################################################-->
<!-- ############################################################################-->

</p><h2> String and numbers </h2> <p>
<div class="compare">
<pre class="l42"><![CDATA[
//42 code
S"hello world"  //String

Url"www.google.com" //Specially formatted string


Javascript"
'x=function(){
'  alert("hello world";)
'  }
' x()
" //multiline string

14Size  //number suitable to be an index
100Meter  //100 meter
25Kg  //25 kg, 
//25Kg+100Meter do not compile
]]></pre>

<pre class="java"><![CDATA[
//(sort of) equivalent Java code 
"hello world"  //String

URI.create("www.google.com") //explicit parsing
//(and Java URL class is discouraged)

Javascript.create( //poor man solution
"x=function(){",
"  alert(\"hello world\";)",
"  }",
" x()"
) //painful. Note how we need to escape "

14  //general purpose int
100L  // may be we want long distances
25d  //may be we want high precision weight
//25d+100L is a double :)
]]></pre>
</div>





<!-- ############################################################################-->
<!-- ############################################################################-->
<!-- ############################################################################-->
<!-- ############################################################################-->

</p><h2> Hello world </h2> <p>
<div class="compare">
<pre class="l42"><![CDATA[
{reuse L42.is/AdamsTowel
Main:{ //Note: Main is not a method, just a 'task'
  Debug(S"Hello world")
  return ExitCode.success()
  }
}
]]></pre>

<pre class="java"><![CDATA[
//implicitly imports java.lang
class MyClassName{
  public static void main(String[] args){
    System.out.println("Hello world");
  }
}
]]></pre>
</div>
<!-- ############################################################################-->
<!-- ############################################################################-->
<!-- ############################################################################-->
<!-- ############################################################################-->










</p><h2> Methods and Classes </h2> <p>
<div class="compare">
<pre class="l42"><![CDATA[
//42 code
class method //class method definition
S answer() //return type and method name
  S"42" //simple bodies do not need {..return..}

class method //class method definition
S compose(S left, S right) //paramters
  left++right //sequence concatenation

Person:Data<<{ //declare a class Person
  S name  //fields
  Year age
//in 42 fields are seen as getters and setters,
//thus there is no need to declare those.
//Also, no need to write down a constructor:
//Data declares a 'name, age' factory for us.

//Data generates implementations for methods like
//equality, hashCode and conversion to string.

  method //instance method definition
  S sayHi(S to){  //here we use {..return..}
    if to==this.name() ( //no parenthesis on if/while
      return S"Oh, you are called "[this.name()]" too?"
      )  //string interpolation
    return S"Hi, my name is "[this.name()]
      " and  I'm "[this.age()]" years old"
    }
  }
]]></pre>

<pre class="java"><![CDATA[
//(sort of) equivalent Java code 
static String answer(){ //static method definition
  return "42";
  }

static String compose(S left, S right){
  return left+right; //magically specially overriden +
  }

class Person{ //declare a class Person
  String name;  //fields
  int age;
  String getName(){return this.name;}
  int getAge(){return this.age;}
  public Person(String name, int age){
    this.name=name;this.age=age; //even longer
  } //if standard formatting is used
  public boolean equals(Object other){/*...*/}
  public int hashCode(){/*was int or long?*/}
  public String toString(){/*...*/}
  
  public String sayHi(String to){
    if (to.equals(this.getName()) {
      return "Oh, you are called "+name+" too?";
    } //is 'name' better then 'this.getName()'?
    return "Hi, my name is "+this.getName()
      +" and  I'm "+this.getAge()+" years old";
  }
}

]]></pre>
</div>
<!-- ############################################################################-->
<!-- ############################################################################-->
<!-- ############################################################################-->
<!-- ############################################################################-->



</p><h2> Control structures </h2> <p>
<div class="compare">
<pre class="l42"><![CDATA[
if a>b (return /*...*/)
var S acc=S""  //explicit 'var': can be updated
while Bool.true() ( //booleans are not constants
  if acc.size()>50Size ( //Size: type of sequence indexes 
    exception void //like java break, rarely used in 42
    )
  acc++=S"step"
  )
]]></pre>

<pre class="java"><![CDATA[
if (a>b) {return /*...*/;}
S acc=""; //updatable is default, but can be final
while (true) {
  if (acc.length()>50) {
    break;
    }
  acc+="step";
}
]]></pre>
</div>


<!-- ############################################################################-->
<!-- ############################################################################-->
<!-- ############################################################################-->
<!-- ############################################################################-->



</p><h2> Vectors </h2> <p>
<div class="compare">
<pre class="l42"><![CDATA[
names=Strings[S"Fred";S"Mary";S"Mark"]

Years:Collection.vector(of:Year) //we need to declare it

ages=Years[20Year;23Year;22Year]
agesShort=Years[20\;23\;22\] //the symbol \ is a shortcut
//Years resolve it as 'Year' since Years contains 'Year'

with n in names.vals() ( //like a for each
  Debug(n)
  )

with n in names.vals(), a in ages.vals() (
//parallel iteration of names and ages
  Debug(Person(name:n, age:a)) //print all the persons
  ) //fails with error if names.size()!=ages.size()

Persons:Collection.vector(of:Person)

friends=Persons[
  Person(name:S"Fred", age:20Year); //long version
  Person(name:S"Mary", age:23Year);
  \(name:\"Mark", age:22\); //short version
  ]

moreFriends=Persons[
  with n in names.vals(), a in ages.vals() (
    use[ Person(name:n, age:a) ]
  )]
//moreFriends contains the same as friends

//with works also in string interpolation:
stringFriends=S"my friends ages are"[
  with n in names.vals(), a in ages.vals() (
    use[ a++S":"++n, sep:S", ") ]
  )]"" //== S"20:Fred, 23:Mary, 22:Mark"
]]></pre>

<pre class="java"><![CDATA[
List<String> names=new ArrayList<>(Arrays.asList(
  "Fred","Mary","Mark"));


List<Integer> ages=new ArrayList<>(Arrays.asList(
  20,23,22));


for(String n :names){
  System.out.println(n);
}

for(int i=0; i<names.size(); i++){
//iterate 0 to size, and manualy use .get(i)
  System.out.println(
    new Person(names.get(i), ages.get(i)));
  ); //silently buggy if names.size()<ages.size()
}

List<Person> friends=new ArrayList<>(Arrays.asList(
  new Person("Fred",20),
  new Person("Mary"23),
  new Person("Mark"22)
  ));

List<Person> moreFriends=new ArrayList<>();
for(int i=0; i<names.size(); i++){
  moreFriends.add(
    new Person(names.get(i), ages.get(i)));
} //silently buggy if names.size()<ages.size()

//again, silently buggy if names.size()<ages.size()
String stringFriends="my friends ages are";
for(int i=0; i<names.size(); i++){
  if(i>0){stringFriends+=", ";}
  stringFriends+=ages.get(i)+":"+names.get(i);
}
]]></pre>
</div>




</p></Div>
 


<Div id="c"><p>
</p><h2> Pure and fair Object Oriented language </h2> <p>
42 is a pure object oriented language,
where every value is an object. This means that:
<ul>
<li>
Numbers are objects, 
so thay can have methods like <span class="code"><![CDATA[.sqrt()]]></span> or <span class="code"><![CDATA[.abs()]]></span>. 
</li><li>
All operators are just method calls, thus <span class="code"><![CDATA[a + b]]></span> is sugar for <span class="code"><![CDATA[a.#plus(b)]]></span>, 
and so on. Note how <span class="code"><![CDATA[#plus]]></span> is a ordinary method name.
Any class that offers the method supports the operator.

</li><li>
Classes are objects, so when you write <span class="code"><![CDATA[Foo.bar()]]></span> you refer to the method <span class="code"><![CDATA[.bar()]]></span> offered by the object denoted by <span class="code"><![CDATA[Foo]]></span>.
class objects are just objects, and you can also store them in local bindings if you wish, as in <span class="code"><![CDATA[x=Foo]]></span>
</li><li>
The code is an object, but only at the granularity of 
Libraries; that is, balanced pairs of curly brackets representing classes (or interfaces) with methods and nested libraries.
This is useful for meta-programming, which we will see later.
First class meta-programming is the most important feature of 42.


</li><li>
Differently from other pure object oriented languages, in 42
all objects have the same treatment, both syntactically and semantically.
For example <span class="code"><![CDATA[x = S"Hello " ++ S"World"]]></span>
This is a declaration for a local binding <span class="code"><![CDATA[x]]></span>, using the string class <span class="code"><![CDATA[S]]></span> and the method operator <span class="code"><![CDATA[++]]></span>,
used as string (or in general sequence/collection) concatenation.

Coming from another programming language, you may be surprised that we have to write <span class="code"><![CDATA[S]]></span> before <span class="code"><![CDATA["Hello "]]></span> and <span class="code"><![CDATA["World"]]></span>.
This extra verbosity is needed to provide fair treatment to all classes. (<a href="note1.xhtml">see more</a>)
In 42 we do not give preferential treatment
to special objects/classes. In this sense, we consider
most other languages to be discriminatory.
They give priority to their "preferred" version of numbers and strings, and this puts into a position of unfair disadvantage library code trying to define its own kinds of numbers/strings.
Instead in 42 you may encounter strings like <span class="code"><![CDATA[URL"www.google.com"]]></span> or
 <span class="code"><![CDATA[EMAIL"Arthur.Dent@gmail.com"]]></span>.
The same for numeric classes: to talk about a street, 20 meters long, you would write
<span class="code"><![CDATA[streetLength=20Meter]]></span>.
Note that we write the class name after the number,
while usually the class name is before.
42 is a little incoherent in this point, both for better readability and because <span class="code"><![CDATA[Meter20]]></span> would be considered an identifier by the parser.
You may encounter <span class="code"><![CDATA[Int]]></span>, <span class="code"><![CDATA[UInt]]></span>, <span class="code"><![CDATA[Float]]></span>,<span class="code"><![CDATA[Size]]></span>, <span class="code"><![CDATA[Meter]]></span>, <span class="code"><![CDATA[Kg]]></span>, <span class="code"><![CDATA[Second]]></span>, <span class="code"><![CDATA[Year]]></span>, <span class="code"><![CDATA[PhoneNumber]]></span> and many other numeric classes.
</li></ul>

</p><h2> A simple language </h2> <p>
We believe 42 is a simple language,
where all classes are final and interfaces are the only instrument to obtain subtyping.
Moreover, 42 does not offer many controversial features usually found in other programming
languages, including:
(method) overloading; threading; numeric conversions and coercions;
casts; var-args; primitive types and automatic (un-)boxing;
inner classes; arrays; generics; scope-hiding of local variables/bindings, methods and fields;
closures/lambdas and null.


</p></Div>

</p><h2> Now, dig into the tutorial! </h2> <p>

<a href="tutorial.xhtml">Let's board the Vogon ship</a>


        </p>
        </div>
      </div>
      <div id="footerwrap">
        <div id="footer">
          <ul style='padding: 10px;'>
            <!--<li style='display:inline;'><a href="http://ecs.victoria.ac.nz/Main/MarcoServetto" >Contact Us</a> |</li>
            <li style='display:inline;'><a href="http://www.victoria.ac.nz/ecs/disclaimer">Mailing list</a> |</li>
            <li style='display:inline;'><a href="http://www.victoria.ac.nz/ecs/accessibility" >Site Accessibility</a></li>
			-->
          </ul>
        </div>
      </div>
    </div>

	
  </body>
</html>
