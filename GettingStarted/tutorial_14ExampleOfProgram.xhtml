<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <link rel="stylesheet" type="text/css" href="css/style.css" media="all"/>
    <script src="js/ace.js"></script>
    <script src="js/utils.js"></script>
    <link rel="shortcut icon" href="css/favicon.ico"/>
    <title>42 - Metaprogramming as default</title>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script src="https://www.googletagmanager.com/gtag/js?id=G-M0E4M0XH2Z"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-M0E4M0XH2Z');
    </script>
    <script src="https://www.googletagmanager.com/gtag/js?id=UA-212820693-1">
    </script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-212820693-1');
    </script>
    <script src="https://www.googletagmanager.com/gtag/js?id=AW-10810288706"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'AW-10810288706');
    </script>
<!-- Event snippet for Page view conversion page -->
<script>
gtag('event', 'conversion', {'send_to': 'AW-10810288706/U3KJCKekmIUDEMLU36Io'});
</script>
  </head>
  <body onload='doOnLoad();'>
    <div id="wrapper">
      <div id="headerwrap">
        <div id="header">
          <img style='float:left;'
            src='css/logoBlue.png' alt='42' width='120' height='120'/>
          <h3 style='float:left;'>
            <p style='font-size:150%; color:rgb(250,250,250);'>42 - The definitive answer to design, code and everything</p>
            <p style='font-size:100%; color:rgb(250,250,250);'> --But you are not going to like it</p>
          </h3>
        </div>
      </div>
      <div id="contentwrap">
        <div id="content">
<p>
<div class="index"><div class="wrapFloat"><div class="inFloat">
<div class="rotate90"> Index of Content</div>
</div><div class="inFloat">
<ol>
 <li><a href="tutorial_01Basics.xhtml"> Basic concepts </a></li>
 <li><a href="tutorial_02ModifiersIntro.xhtml"> Introduction to modifiers </a></li>
 <li><a href="tutorial_03BasicClasses.xhtml"> Basic Classes </a></li>
 <li><a href="tutorial_04ErrorsAndExceptions.xhtml"> Errors and Exceptions </a></li>
 <li><a href="tutorial_05Caching.xhtml"> Caching </a></li>
 <li><a href="tutorial_06CachingMut.xhtml"> Caching on Mutable objects </a></li>
 <li><a href="tutorial_07InterfacesAndMatching.xhtml"> Interfaces and Matching </a></li>
 <li><a href="tutorial_08Sequences.xhtml"> Collections and Sequences </a></li>
 <li><a href="tutorial_09InputOutput.xhtml"> Input Output </a></li>
 <li><a href="tutorial_10Exercises.xhtml"> Exercises </a></li>
 <li><a href="tutorial_11MetaprogrammingIntro.xhtml"> Metaprogramming Introduction </a></li>
 <li><a href="tutorial_12Refactoring.xhtml"> Programmatic Refactoring </a></li> 
 <li><a href="tutorial_13MoreDecorators.xhtml"> More Decorators </a></li>
 <li><a href="tutorial_14ExampleOfProgram.xhtml"> Example of a 42 Program </a></li>
 <li><a href="tutorial_15DeployCode.xhtml"> Deploy code </a></li>
</ol>
</div></div><div class="finishFloat"></div></div>
<br/>
<div class="index"><div class="wrapFloat"><div class="inFloat">
</div><div class="inFloat">
&nbsp; &nbsp; &nbsp; <a href="tutorial_13MoreDecorators.xhtml"> Previous </a>...<a href="tutorial_15DeployCode.xhtml"> Next </a>
</div></div><div class="finishFloat"></div></div>
<br/>

 </p><p id="ExampleOfProgram"> </p><div style="break-after:page"></div><h1> Example of a 42 program </h1> <p>

In this chapter, we will see how to develop a GUI connected with a DataBase.
For simplicity, consider that we have a database with a single table <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Person]]></span><it style="font-style: bold; color:green;">&#187;</it> that contains a few fields.
We want to make a GUI that displays the data and allows us to edit it.

</p><h2> (1/5) Query boxes </h2> <p>
First we load the libraries we need:
Unit, JavaServer, GuiBuilder and Query.

<pre class="l42Big"><![CDATA[
reuse [L42.is/AdamsTowel]
Unit = Load:{reuse [L42.is/Unit]}
LoadJ = Load:{reuse [L42.is/JavaServer]}
LoadGui = Load:{reuse [L42.is/GuiBuilder]}
Query = Load:{reuse [L42.is/Query]}
]]></pre>
We then declare some useful units. <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Person]]></span><it style="font-style: bold; color:green;">&#187;</it> objects have ages expressed in years,
heights expressed in meters and weights expressed in Kgs.
<pre class="l42Big"><![CDATA[
Year = Unit(I)
Meter = Unit(Num)
Kg = Unit(Num)
]]></pre>
</p><p>
We then ask <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Query.sql]]></span><it style="font-style: bold; color:green;">&#187;</it> to generate a class to support SQL queries using a Java slave and a connection string.
As an example, we are using a derby DB.
For now, we consider the DB to be already populated. In the end we discuss how to initialize the DB itself.
<pre class="l42Big"><![CDATA[
DBJ = LoadJ(slaveName=S"dbServer{}") //slave for the DB connection
DB = Query.sql(//instantiate Query for SQL queries
  connectionString=S"jdbc:derby:PersonsGui;create=true",
  javaServer=DBJ)
]]></pre>


The class <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[DB]]></span><it style="font-style: bold; color:green;">&#187;</it> can now reify the DB tables; here it is just <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Table.Person]]></span><it style="font-style: bold; color:green;">&#187;</it>.
<pre class="l42Big"><![CDATA[
Table = DB.#$of().tables()
]]></pre>


Finally, we can make a query box with all the queries that are relevant for this application.
A query box is a capability class, whose methods are able to do queries on a given database.
It is obtained with the decorartor <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[DB.QueryBox]]></span><it style="font-style: bold; color:green;">&#187;</it>,
that can recognize nested classes created with the
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[DB.query]]></span><it style="font-style: bold; color:green;">&#187;</it> method.
Since <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[DB]]></span><it style="font-style: bold; color:green;">&#187;</it> was created by providing the connection string, queries are aware of their database.

<pre class="l42Big"><![CDATA[
Queries = DB.QueryBox:{...}
]]></pre>
<pre class="l42Big"><![CDATA[
//file Queries.L42
All = DB.query[Table.Person.List]"SELECT * FROM Person"
  
Insert = DB.query[Void;S;Year;Meter;Kg]"""
  |INSERT INTO Person (name,age,height,weight)
  |Values (@name,@age,@height,@weight)
  """
DeleteId = DB.query[Void;I]"DELETE FROM Person WHERE id=@id"
DeleteName = DB.query[Void;S]"DELETE FROM Person WHERE name=@name"
]]></pre>
The symbol <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[@]]></span><it style="font-style: bold; color:green;">&#187;</it> identifies parameters in the queries, while the types
in <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[[..]]]></span><it style="font-style: bold; color:green;">&#187;</it> are the query result type followed by any parameters.
Queries return lists of objects. Those objects are constructed by calling a (factory) method whose arguments have the same name as the query fields.
</p><p>

Right now the class <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Query]]></span><it style="font-style: bold; color:green;">&#187;</it> supports both <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[SQL]]></span><it style="font-style: bold; color:green;">&#187;</it> and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[IQL]]></span><it style="font-style: bold; color:green;">&#187;</it>.
We expect to add more query languages in the future.
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[IQL]]></span><it style="font-style: bold; color:green;">&#187;</it> is a query language to query the user by asking them to complete a form.
Using <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[IQL]]></span><it style="font-style: bold; color:green;">&#187;</it> in 42 is very similar to using <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[SQL]]></span><it style="font-style: bold; color:green;">&#187;</it>.
In particular, the result of both SQL and IQL queries is a lists of objects instantiated using a unique #immK(..) method.
While this is a consistent and flexible way to process tabular data,
it means  that for queries returning a single column we must have a 
type with such a single field.
In 42, declaring those types and their corresponding list type takes just a single line.
Note how for Person we can use our specialized units <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Year]]></span><it style="font-style: bold; color:green;">&#187;</it>, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Meter]]></span><it style="font-style: bold; color:green;">&#187;</it> and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Kg]]></span><it style="font-style: bold; color:green;">&#187;</it>.
<pre class="l42Big"><![CDATA[
Key = Data:Data.AddList:{I id}
PName = Data:Data.AddList:{S name}
Person = Data:Data.AddList:{S name, Year age, Meter height, Kg weight}
]]></pre>
In the same way, if a query returns a single row, we will have it served as the only element of a length 1 list.
</p><p>
We can now make the set of all user queries with another <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[QueryBox]]></span><it style="font-style: bold; color:green;">&#187;</it>:

<pre class="l42Big"><![CDATA[
GuiJ = LoadJ(slaveName=S"miniGuiSlave{}") //slave for IQL and Gui
IQL = Query.iql(javaServer=GuiJ)//instantiate Query for IQL queries
Dialogs = IQL.QueryBox:{...}//A box with all the queries we want to support
]]></pre>
<pre class="l42Big"><![CDATA[
//file Dialogs.L42
AddPersons = IQL.query[Person.List]"""
  | 'Add persons' Pages('Add data for more persons')
  | name 'person name:' String
  | age  'person age:'  Integer
  | height 'person height:' Decimal{regex='[0-9]*\\.[0-9][0-9]'}
  | weight 'person weight:' Decimal{regex='[0-9]*\\.[0-9]'}
  """
RemoveById=IQL.query[Key.List]"""
  | 'Deleting an entry' Single('Entry to delete?')
  | id 'index' String
  """
RemoveByName = IQL.query[PName.List]"""
  | 'Deleting entries' Tabular('Entries to delete?')
  | name 'person name:' String
  """
]]></pre>
For a complete guide to IQL, you can refer to the well designed
IQL guide, located in the readme of the
<a href='https://github.com/RegevBenita/IQL'>IQL repository</a>.

</p><h2> (2/5) Model </h2> <p>
To write a GUI we need a <it style="font-style: italic;">Model</it> and a <it style="font-style: italic;">View</it>.
The model is an object whose methods are triggered by events of the view.
Comparing this with the conventional MVC, here the model serves both the roles of the model and the controller.
In this example, the model will have the two boxes and the java slave to control the Gui.
<pre class="l42Big"><![CDATA[
Gui = LoadGui(javaServer=GuiJ)  
Model = Data:GuiJ.Handler:{...} //the model answering to Java events
]]></pre>
<pre class="l42Big"><![CDATA[
//file Model.L42
mut GuiJ j
mut Queries sql
mut Dialogs iql
@GuiJ.Handler mut method Void printAll(S msg)=(/*..*/)
@GuiJ.Handler mut method Void addPerson(S msg)=(/*..*/)
@GuiJ.Handler mut method Void removeById(S msg)=(/*..*/)
@GuiJ.Handler mut method Void removeByName(S msg)=(/*..*/)
]]></pre>
Methods annotated with <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[GuiJ.Handler]]></span><it style="font-style: bold; color:green;">&#187;</it> will respond to the corresponding event from the view.
Those methods must all take a single <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[S]]></span><it style="font-style: bold; color:green;">&#187;</it> parameter, used by the view to communicate extra information. This parameter is often unused.
Those methods are defined as follows:
<pre class="l42Big"><![CDATA[
@GuiJ.Handler mut method Void printAll(S msg)=(
  this.#j().submitEvent(key='Example.Display, id=S"tableClear", msg=S"")
  for (id,name,age,height,weight) in this.#sql().all()() (
    this.#j().submitEvent(key='Example.Display, id=S"tableAdd",
      msg=S"%id,%name,%age,%Double(height),%Double(weight),")
    )
  whoops DB.Fail, GuiJ.Fail
  )
]]></pre>
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[printAll(msg)]]></span><it style="font-style: bold; color:green;">&#187;</it> first asks the view to clear the table; then
it executes the query <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[all]]></span><it style="font-style: bold; color:green;">&#187;</it> by doing <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[this.#sql().all()()]]></span><it style="font-style: bold; color:green;">&#187;</it>.
That is:
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[this.#sql()]]></span><it style="font-style: bold; color:green;">&#187;</it> is the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[QueryBox]]></span><it style="font-style: bold; color:green;">&#187;</it> offering access to all the individual query objects.
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[this.#sql().all()]]></span><it style="font-style: bold; color:green;">&#187;</it> is the field access for the query object doing the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[DB.query[Table.Person.List]"SELECT * FROM Person"]]></span><it style="font-style: bold; color:green;">&#187;</it> query.
Finally, since this query takes no parameters, we just use <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[()]]></span><it style="font-style: bold; color:green;">&#187;</it> to call it. Calling the query returns a <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Table.Person.List]]></span><it style="font-style: bold; color:green;">&#187;</it> object,
that is iterated with the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[for]]></span><it style="font-style: bold; color:green;">&#187;</it>. We map the fields of <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Person]]></span><it style="font-style: bold; color:green;">&#187;</it> onto local variables <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[(id,name,age,height,weight)]]></span><it style="font-style: bold; color:green;">&#187;</it> for easy access in the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[for]]></span><it style="font-style: bold; color:green;">&#187;</it> body.
For each <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Person]]></span><it style="font-style: bold; color:green;">&#187;</it>, the body asks the view to add a line into the table. Information has to be encoded as a string to be passed to the view. String interpolation <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[%]]></span><it style="font-style: bold; color:green;">&#187;</it> make this easy, and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Num]]></span><it style="font-style: bold; color:green;">&#187;</it> values are converted as <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Double]]></span><it style="font-style: bold; color:green;">&#187;</it> to print them with decimal points instead of printing them as a fraction.
Finally, we <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[whoops]]></span><it style="font-style: bold; color:green;">&#187;</it> exceptions to assert that we do not expect them to be leaked.
<br/>
This is quite a mouthful.
42 code tends to be quite compact, but for the sake of clearity and to support learning, we will now encode it again in a more verbose style:
<pre class="l42Big"><![CDATA[
@GuiJ.Handler mut method Void printAll(S msg)=(
  eventChannel = S"Example.Display" //the view lissens on this channel
  eventId = S"tableClear" //the view reacts to this id
  this.#j().submitEvent(key=eventChannel, id=eventId, msg=S"")
  selectAll = this.#sql().all()
  Table.Person.List allPersons = selectAll()
  for person in allPersons (
    id = person.id()
    name = person.name()
    age = person.age()
    height = Double(person.height())//creates a Double from a Num
    weight = Double(person.weight())
    msg=S"%id,%name,%age,%height,%weight,"//a string format for the view
    this.#j().submitEvent(key=eventChannel, id=S"tableAdd", msg=msg)
    )
  catch exception DB.Fail x error x
  catch exception GuiJ.Fail x error x  
  )
]]></pre>
As you can see, you are free to make the code more readable by declaring a lot of local variables, but you can also keep a more compact style.
In the end, more verbose code may end up less readable simply because there is much more of it.

</p><p>
The other methods have a similar structure.
<pre class="l42Big"><![CDATA[
@GuiJ.Handler mut method Void addPerson(S msg)=(
  for (name,age,height,weight) in this.#iql().addPersons()() (
    this.#sql().insert()(name=name, age=age, height=height, weight=weight)
    )
  this.printAll(msg=msg)
  whoops DB.Fail, IQL.Fail
  )
]]></pre>
The method <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[addPerson(msg)]]></span><it style="font-style: bold; color:green;">&#187;</it> ask the user to provide data for a list of persons by running the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[.addPersons()]]></span><it style="font-style: bold; color:green;">&#187;</it> IQL query,
returning a <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Person.List]]></span><it style="font-style: bold; color:green;">&#187;</it>.
Then, the data of each <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Person]]></span><it style="font-style: bold; color:green;">&#187;</it> is inserted in the database.
Note how the parameters of the query <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[.insert()]]></span><it style="font-style: bold; color:green;">&#187;</it> are provided using the names of the query declaration
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[".. Values (@name,@age,@height,@weight)"]]></span><it style="font-style: bold; color:green;">&#187;</it>:
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[@name]]></span><it style="font-style: bold; color:green;">&#187;</it> in the query string was used to create the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[name]]></span><it style="font-style: bold; color:green;">&#187;</it> parameter; and so on for the others. Thanks to metaprogramming
the query method is synthesized out of the query string.
<br/>
After inserting all the new data in the database, we refresh the displayed table by manually calling <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[.printAll(msg)]]></span><it style="font-style: bold; color:green;">&#187;</it>.

</p><p>
<pre class="l42Big"><![CDATA[
@GuiJ.Handler mut method Void removeById(S msg)=(
  for (id) in this.#iql().removeById()() (//zero or one time
    this.#sql().deleteId()(id=id)
    )
  this.printAll(msg=msg)
  whoops DB.Fail, IQL.Fail
  )
@GuiJ.Handler mut method Void removeByName(S msg)=(
  for (name) in this.#iql().removeByName()() (//zero or many times
    this.#sql().deleteName()(name=name)
    )
  this.printAll(msg=msg)
  whoops DB.Fail, IQL.Fail
  )
]]></pre>
Methods <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[removeById(msg)]]></span><it style="font-style: bold; color:green;">&#187;</it> and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[removeByName(msg)]]></span><it style="font-style: bold; color:green;">&#187;</it>
are very similar; they call the corresponding <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[IQL]]></span><it style="font-style: bold; color:green;">&#187;</it> query, 
extract the single field (using the notations <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[(id)]]></span><it style="font-style: bold; color:green;">&#187;</it> and
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[(name)]]></span><it style="font-style: bold; color:green;">&#187;</it>) and update the database using the corresponding <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[SQL]]></span><it style="font-style: bold; color:green;">&#187;</it> query.

</p><p>
In this setting we represent persons in two different classes:
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Person]]></span><it style="font-style: bold; color:green;">&#187;</it> and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Table.Person]]></span><it style="font-style: bold; color:green;">&#187;</it>.
This allows for those two different classes to actually be quite different:
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Table.Person]]></span><it style="font-style: bold; color:green;">&#187;</it> have an <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[id]]></span><it style="font-style: bold; color:green;">&#187;</it> field and fields <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[weight]]></span><it style="font-style: bold; color:green;">&#187;</it> and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[height]]></span><it style="font-style: bold; color:green;">&#187;</it> are of type <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Num]]></span><it style="font-style: bold; color:green;">&#187;</it>.
On the other side <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Person]]></span><it style="font-style: bold; color:green;">&#187;</it> have no <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[id]]></span><it style="font-style: bold; color:green;">&#187;</it> field and 
fields <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[weight]]></span><it style="font-style: bold; color:green;">&#187;</it> and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[height]]></span><it style="font-style: bold; color:green;">&#187;</it> are of type <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Kg]]></span><it style="font-style: bold; color:green;">&#187;</it> and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Meter]]></span><it style="font-style: bold; color:green;">&#187;</it>.
Those two classes serve different roles, and if we wish to change the
kind of data the user must provid we can change <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Person]]></span><it style="font-style: bold; color:green;">&#187;</it> and make it even more distant with respect to the information stored in the database.
On the other side, if we wanted to apply a transformation on the data readed from the DB, we could use another custom person class, instead of <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Table.Person]]></span><it style="font-style: bold; color:green;">&#187;</it>, and define and appropriate <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[#immK]]></span><it style="font-style: bold; color:green;">&#187;</it> method to adapt the data from the database into any shape we need.
</p><p>
It is also interesting to consider what happens if the database schema changes.
If the person table is removed, or the person fields are renamed,
then we will get an error while typing the model.
<br/>
In some sense we are turning events that would have caused a runtime exception into
understandable compile time errors.


</p><h2> (3/5) View </h2> <p>
The library <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[GuiBuilder]]></span><it style="font-style: bold; color:green;">&#187;</it> allows to write a GUI
using Java Swing.
For safety reasons, Java code is compiled and executed on a separated JVM.
We can easily generate a GUI for our example in the following way:
<pre class="l42Big"><![CDATA[
OpenGui = {...}
]]></pre>
<pre class="l42Big"><![CDATA[
//file OpenGui.L42
class method Void (mut GuiJ j)[_] = (
  gui=Gui(j=j,package=S"miniGui",imports=S"""%
    | %Gui.defaultImports()
    | import javax.swing.table.DefaultTableModel;
    """,
    name='Example,x=800\,y=600\
    )
  gui"""%
    |JPanel screen1=new JPanel();
    |{add(screen1);}
    |JPanel buttons=new JPanel();
    |{addNorth(screen1,buttons);}
    |%gui.button(id=S"addPerson",msg='PressedAdd,text=S"add")
    |{addFlow(buttons,addPerson);}
    |%gui.button(id=S"removeById",msg='PressedRemove,text=S"remove by id")
    |{addFlow(buttons,removeById);}
    |%gui.button(id=S"removeByName",msg='PressedRemove,text=S"remove by name")
    |{addFlow(buttons,removeByName);}
    |%gui.button(id=S"printAll" msg='PressedPrint text=S"printAll")
    |{addFlow(buttons,printAll);}
    |Object[] tLabels={"id","name","age","height","weight"};
    |DefaultTableModel tModel=new DefaultTableModel(new Object[][]{},tLabels);
    |JTable table = new JTable(tModel);
    |{addCenter(screen1,new JScrollPane(table));}
    |{event.registerEvent("Example.Display","tableAdd",
    |  (k,id,msg)->SwingUtilities.invokeLater(()->tModel.addRow(msg.split(","))));}
    |{event.registerEvent("Example.Display","tableClear",
    |  (k,id,msg)->SwingUtilities.invokeLater(()->tModel.setRowCount(0)));}
    """
  )
]]></pre>

Where <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[gui.addButton(..)]]></span><it style="font-style: bold; color:green;">&#187;</it> is a convenient way to generate a button raising 42 events.
When such 42 code will run, the following Java code will be generated:
<pre class="java"><![CDATA[
package miniGui; //generated and compiled code, it is not saved on any file
import javax.swing.*;
import l42Gui.*;//contained in GuiSupport.jar
import is.L42.platformSpecific.javaEvents.Event; //standard 42 Event class
import javax.swing.table.DefaultTableModel;

public class Example {
  public Example (Event event){
    l42Gui.L42Frame f=l42Gui.L42Frame.open(
      ()->new l42Gui.L42Frame(event,"Example",800,600){
        JPanel screen1=new JPanel();
        {add(screen1);}
        JPanel buttons=new JPanel();
        {addNorth(screen1,buttons);}
        JButton addPerson = new JButton("add");{
          addPerson.addActionListener(e->event
            .submitEvent("Example","addPerson","PressedAdd"));
        }
        {addFlow(buttons,addPerson);}
        JButton removeById = new JButton("remove by id");{
          removeById.addActionListener(e->event
            .submitEvent("Example","removeById","PressedRemove"));
        }
        {addFlow(buttons,removeById);}
        JButton removeByName = new JButton("remove by name");{
          removeByName.addActionListener(e->event
            .submitEvent("Example","removeByName","PressedRemove"));
        }
        {addFlow(buttons,removeByName);}
        JButton printAll = new JButton("printAll");{
          printAll.addActionListener(e->event
            .submitEvent("Example","printAll","PressedPrint"));
        }
        {addFlow(buttons,printAll);}
        Object[] tLabels={"id","name","age","height","weight"};
        DefaultTableModel tModel=new DefaultTableModel(new Object[][]{},tLabels);
        JTable table = new JTable(tModel);
        {addCenter(screen1,new JScrollPane(table));}
        {event.registerEvent("Example.Display","tableAdd",
          (k,id,msg)->SwingUtilities.invokeLater(
            ()->tModel.addRow(msg.split(","))));
        }
        {event.registerEvent("Example.Display","tableClear",
          (k,id,msg)->SwingUtilities.invokeLater(
            ()->tModel.setRowCount(0)));
        }
      }
    );
  }
}
]]></pre>
and in the java main <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[new Example(eventCapability)]]></span><it style="font-style: bold; color:green;">&#187;</it>
will be called.
As you can see, the code provided by the user is simply injected into
the body of a <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[JFrame]]></span><it style="font-style: bold; color:green;">&#187;</it> class.
From that context we can declare fields and methods, and we can declare initialization actions using (non-static) java initialization blocks.

This code would look trivial if you are a Java Swing expert, and very obscure otherwise.

Note how we use <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[tModel.addRow(msg.split(","))]]></span><it style="font-style: bold; color:green;">&#187;</it>
to add the row to the table: in java <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[addRow]]></span><it style="font-style: bold; color:green;">&#187;</it> wants an array
and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[msg.split(",")]]></span><it style="font-style: bold; color:green;">&#187;</it> will produce an array from a string whose parts are separated by <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[']]></span><it style="font-style: bold; color:green;">&#187;</it>.
We made in this way for the sake of a simple example, but
we are unsatisfied by this brittle solution: it only works since names or numbers should not have the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[']]></span><it style="font-style: bold; color:green;">&#187;</it> inside.

</p><h2> (4/5) Putting all together </h2> <p>
Finally, a <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Main]]></span><it style="font-style: bold; color:green;">&#187;</it> puts this all together
<pre class="l42Big"><![CDATA[
reuse [L42.is/AdamsTowel]
Unit = Load:{reuse [L42.is/Unit]}
LoadJ = Load:{reuse [L42.is/JavaServer]}
LoadGui = Load:{reuse [L42.is/GuiBuilder]}
Query = Load:{reuse [L42.is/Query]}
Year = Unit(I)
Meter = Unit(Num)
Kg = Unit(Num)
DBJ = LoadJ(slaveName=S"dbServer{}")
DB = Query.sql(connectionString=S"jdbc:derby:PersonsGui;create=true", javaServer=DBJ)
Table = DB.#$of().tables()
Queries = DB.QueryBox:{...}
GuiJ = LoadJ(slaveName=S"miniGuiSlave{}")
IQL = Query.iql(javaServer=GuiJ)
Dialogs = IQL.QueryBox:{...}
Gui = LoadGui(javaServer=GuiJ)  
Model = Data:GuiJ.Handler:{...}
OpenGui = {...}

Main=(
  j=GuiJ.#$of()//the Java GUI slave
  sql=Queries(DB.#$of())//sql queries and the Java DB slave
  iql=Dialogs(IQL(j))//iql queries supported by the GUI slave
  model=Model(j=j,sql=sql,iql=iql)
  OpenGui(j=j)
  for e in j(\['Example]) ( e>>model )//event loop
  )
]]></pre>
As you can see, the GUI produces events on the channel <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Example]]></span><it style="font-style: bold; color:green;">&#187;</it> (the name of the generated Java class) and 
consumes events on the channel <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Example.Display]]></span><it style="font-style: bold; color:green;">&#187;</it>.
</p><p>
If we wanted to add functionalities to initialize and 
to clear the database, we could do as follow: 
<pre class="l42Big"><![CDATA[
Create = DB.query[Void]"""
  |CREATE TABLE Person (
  |  id int NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY
  |    (Start with 1, Increment by 1),
  |  name varchar(255),
  |  age int,
  |  height decimal(5,2),
  |  weight decimal(5,1)
  |  )
  """
PopulateIfEmpty = { //if the DB is already set up, executing Create
  return Create(DB.#$of())() //will throw an exception.
  catch Message _ return void // if we ignore it such exception encodes
  } //an "initialize the DB if needed" operation.
]]></pre>
</p><p>
<pre class="l42Big"><![CDATA[
Drop = DB.query[Void]"DROP TABLE Person"
AfterMain = Drop(DB.#$of())()
]]></pre>

</p><h2> (5/5) Summary </h2> <p>
42 metaprogramming allows for complex applications to be written in compact and secure ways:
in this application we used 
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Unit]]></span><it style="font-style: bold; color:green;">&#187;</it>,
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[JavaServer]]></span><it style="font-style: bold; color:green;">&#187;</it>,
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[GuiBuilder]]></span><it style="font-style: bold; color:green;">&#187;</it> and
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Query]]></span><it style="font-style: bold; color:green;">&#187;</it>.
Those are all normal 42 libraries that 42 programmers could write themselves, and indeed studying the implementation of those libraries is currently the best way to become a Magrathean.
</p><p>
In particular, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Query]]></span><it style="font-style: bold; color:green;">&#187;</it> allows us 
to take queries written in another language (for now, just SQL and IQL, but the concept is expandable)
and converts them into a simple 42 well typed API that can be used
to build programs in an compact and elegant way.
Concepts like the <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[QueryBox]]></span><it style="font-style: bold; color:green;">&#187;</it> can be used to control what part of an application is allowed to do important operations, adding a great deal of security.
        </p>
        </div>
      </div>
      <div id="footerwrap">
        <div id="footer">
          <ul style='padding: 10px;'>
            <li style='display:inline;'>
            <a href="mailto:marco.servetto@gmail.com" rel="me">Contact Us</a> |</li>
            <li style='display:inline;'>
            <a href= "http://ecs.victoria.ac.nz/mailman/listinfo/team42">Mailing list</a> |</li>
          </ul>
        </div>
      </div>
    </div>

	
  </body>
</html>

